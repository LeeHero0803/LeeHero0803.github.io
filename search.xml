<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog test II</title>
    <url>/2023/07/06/blog-test-II/</url>
    <content><![CDATA[<h1 id="ECNU-Linear-Algebra"><a href="#ECNU-Linear-Algebra" class="headerlink" title="ECNU - Linear Algebra"></a>ECNU - Linear Algebra</h1><h2 id="1-x-知识点提纲"><a href="#1-x-知识点提纲" class="headerlink" title="[1.x] 知识点提纲"></a>[1.x] 知识点提纲</h2><h3 id="1-1-x-行列式"><a href="#1-1-x-行列式" class="headerlink" title="[1.1.x] 行列式"></a>[1.1.x] 行列式</h3><ol>
<li>二阶行列式计算<ul>
<li>主对角线 $-$ 副对角线</li>
</ul>
</li>
<li>三角行列式计算<ul>
<li>上&#x2F;下三角：主对角线元素乘积</li>
<li>行列式性质：<ul>
<li>某行&#x2F;列的k倍加到另一行&#x2F;列，行列式值不变</li>
<li>某行&#x2F;列所有元素公因子可以提到行列式外</li>
<li>交换两行&#x2F;列，行列式值变号</li>
</ul>
</li>
</ul>
</li>
<li>行和相等行列式计算<ul>
<li>把后面所有列加到第一列，提公因子，使得第一列全部变成1</li>
<li>行变换，化成三角行列式</li>
</ul>
</li>
<li>范德蒙德行列式计算<ul>
<li>特点：<ul>
<li>第一行&#x2F;列元素全为 $1$</li>
<li>每一列&#x2F;行元素均为等比数列，且公比元素在第 $2$ 行&#x2F;列</li>
<li>结果为公比元素作差再相乘</li>
</ul>
</li>
</ul>
</li>
<li>爪形行列式计算<ul>
<li>通过提公因子，将主对角线第 $2,3,…,n$ 个元素化为 $1$</li>
<li>化为三角行列式</li>
</ul>
</li>
<li>余子式、代数余子式<ul>
<li>余子式 $M_{ij}$ 无符号；代数余子式 $A_{ij}$ 有符号</li>
<li>行列式 $&#x3D;$ 某行&#x2F;列元素乘以相应代数余子式后求和</li>
<li>eg. 求 $A_{31}+3A_{32}-2A_{33}+2A_{34}$ <ul>
<li>把行列式 $D$ 中 $a_{31},…,a_{34}$ 分别替换为对应系数 $1,3,-2,2$ 后再求行列式即可。</li>
</ul>
</li>
<li>eg. 求 $M_{31}+3M_{32}-2M_{33}+2M_{34}$ <ul>
<li>通过 $M$ 和 $A$ 的代换，将原式化为：$A_{31}-3A_{32}+(-2A_{33})-2A_{34}$ </li>
<li>再系数替换，求新的行列式</li>
</ul>
</li>
</ul>
</li>
<li>用拆和的方法计算行列式<ul>
<li>当行列式某行&#x2F;列为两数之和，行列式可分解为两行列式之和（其余行&#x2F;列元素不变）</li>
<li>当行列式某两行&#x2F;列元素成比例，行列式等于零</li>
</ul>
</li>
<li>拉普拉斯公式计算行列式<ul>
<li>$D&#x3D;\begin{vmatrix} a_1&amp;a_2&amp;0&amp;0 \ a_3&amp;a_4&amp;0&amp;0 \ c_1&amp;c_2&amp;b_1&amp;b_2 \ c_3&amp;c_4&amp;b_3&amp;b_4 \end{vmatrix} &#x3D; \begin{vmatrix}A&amp;0\C&amp;B\end{vmatrix}&#x3D;|A||B|&#x3D;\begin{vmatrix} a_1&amp;a_2\a_3&amp;a_4 \end{vmatrix}\begin{vmatrix} b_1&amp;b_2\b_3&amp;b_4 \end{vmatrix}$</li>
<li>若不符合主对角线形式的拉普拉斯公式，可以通过行&#x2F;列调换使得其变成主对角线形式</li>
<li>$D&#x3D;\begin{vmatrix}0&amp;A_{m\times m}\B_{n\times n}&amp;C\end{vmatrix}&#x3D;(-1)^{m+n}|A||B|&#x3D;(-1)^{m+n}\begin{vmatrix} a_1&amp;a_2\a_3&amp;a_4 \end{vmatrix}\begin{vmatrix} b_1&amp;b_2\b_3&amp;b_4 \end{vmatrix}$</li>
</ul>
</li>
</ol>
<h3 id="1-2-x-矩阵"><a href="#1-2-x-矩阵" class="headerlink" title="[1.2.x] 矩阵"></a>[1.2.x] 矩阵</h3><ol>
<li><p>矩阵的乘法</p>
<ul>
<li><code>[Tip]</code>矩阵乘法不满足交换律，满足分配律</li>
</ul>
</li>
<li><p>抽象矩阵求逆矩阵</p>
<ul>
<li><code>[Key]</code>根据条件出发，找出相乘为E的矩阵</li>
<li><code>[Key]</code>拆出来 or 长除法</li>
<li><code>[Tip]</code>对 $A$ 而言，根据 $AB&#x3D;E$ 找出相应的 $B$</li>
</ul>
</li>
<li><p>数字型求逆矩阵</p>
<ul>
<li><code>[Key]</code>利用行变化法求逆矩阵：$(A|E)\xrightarrow[]{行变换}(E|A^{-1})$</li>
<li><code>[Key]</code>二阶矩阵逆矩阵秒杀“两调一除”：$A&#x3D;\begin{pmatrix}a&amp;b\c&amp;d\end{pmatrix}$ ; $A^{-1}&#x3D;\frac{1}{\begin{vmatrix}A\end{vmatrix}}\begin{pmatrix}d&amp;-b\-c&amp;a\end{pmatrix}$</li>
<li><code>[Tip]</code>方阵 $A$ 可逆 $\Leftrightarrow$ $\begin{vmatrix}A\end{vmatrix}\neq0$</li>
</ul>
</li>
<li><p>求解矩阵方程</p>
<ul>
<li>$AX&#x3D;B \Longrightarrow X&#x3D;A^{-1}B$</li>
<li>$XA&#x3D;B \Longrightarrow X&#x3D;BA^{-1}$</li>
<li>$BXA&#x3D;C \Longrightarrow X&#x3D;B^{-1}CA^{-1}$<ul>
<li>前提都是 $A^{-1}、B^{-1}$ 存在</li>
</ul>
</li>
<li>$AA^*&#x3D;A^<em>A&#x3D;|A|E$ ; $A^</em>&#x3D;|A|A^{-1}$<ul>
<li>用来解决矩阵方程中的 $A^*$</li>
</ul>
</li>
<li><code>[Tip]</code><em>行列式</em>外系数乘进去是一行&#x2F;一列；<em>矩阵</em>外系数乘进去是每一个元素</li>
</ul>
</li>
<li><p>方阵的行列式</p>
<ul>
<li>$|A^{-1}|&#x3D;|A|^{-1}$ ; $|A^T|&#x3D;|A|$ ; $|kA_{n\times n}|&#x3D;k^n|A|$ ; $|A^{*}_{n\times n}|&#x3D;|A|^{n-1}$</li>
<li>$|AB|&#x3D;|A||B|$</li>
<li>$|A+B|\neq|A|+|B|$，就是说不能把里面的各个方阵分开求行列式再加和</li>
<li><code>[Tip]</code>提出来行列式内系数 $k$ 的时候也要注意，若方阵是 $n$ 阶，提出来的是 $k^n$</li>
</ul>
</li>
<li><p>方阵的转置与逆<br>$$<br>(A^T)^T &amp;&#x3D;&amp; A &amp;;&amp; (A^{-1})^{-1}&amp;&#x3D;&amp;A\<br>(A+B)^T &amp;&#x3D;&amp; A^T + B^T &amp;;&amp; &amp;&#x2F;\<br>(kA)^T &amp;&#x3D;&amp; kA^T &amp;;&amp; (kA)^{-1}&amp;&#x3D;&amp;\frac{1}{k}A^{-1}\<br>(AB)^T &amp;&#x3D;&amp; B^TA^T &amp;;&amp; (AB)^{-1}&amp;&#x3D;&amp;B^{-1}A^{-1}\<br>&amp;&amp;&amp;&amp;(A^T)^{-1}&amp;&#x3D;&amp;(A^{-1})^T<br>$$</p>
</li>
<li><p>矩阵的秩</p>
<ul>
<li>$A\xrightarrow[]{初等行变换}B_{阶梯型}$，则 $r(A) &#x3D; n_{B非零行数}$</li>
<li>满秩矩阵 $\Leftrightarrow$ 非奇异矩阵 $\Leftrightarrow$ 矩阵可逆 $\Leftrightarrow$ 对应行列式不为零</li>
<li>秩也是矩阵中线性无关行（或列）的最大个数</li>
</ul>
</li>
<li><p>矩阵秩的不等式<br>$$<br>  r(AB)&amp;\leq &amp; \min{r(A),r(B)}\<br>  r(A+B)&amp;\leq &amp; r(A)+r(B)\<br>  r(A|B)&amp;\leq &amp; r(A)+r(B)\<br>  r(A)+r(B)&amp;\leq &amp; r(AB)+n<br>$$</p>
</li>
</ol>
<ul>
<li>对 $AB&#x3D;O$</li>
</ul>
<p>$$<br>  r(A_{n\times n})+r(B_{n\times n})\leq  n<br>$$</p>
<ul>
<li>对 $A_{n\times n}(n\geq2)$</li>
</ul>
<p>$$<br>r(A^*)&#x3D;<br>  \begin{cases}<br>      n&amp;r(A)&#x3D;n\<br>      1&amp;r(A)&#x3D;n-1\<br>      0&amp;r(A)&lt;n-1<br>  \end{cases}<br>$$</p>
<ul>
<li>若 $C&#x3D;\begin{pmatrix}A&amp;O\O&amp;B\end{pmatrix}$</li>
</ul>
<p>$$<br>  r(C) &#x3D; r(A)+r(B)<br>$$</p>
<ul>
<li>若 $C&#x3D;\begin{pmatrix}A&amp;O\O&amp;B\end{pmatrix}$</li>
</ul>
<p>$$<br>  r(C) &#x3D; r(A)+r(B)<br>$$</p>
<ul>
<li>若 $C&#x3D;\begin{pmatrix}A&amp;C\O&amp;B\end{pmatrix}$<br>$$<br>r(C) \geq r(A)+r(B)<br>$$</li>
</ul>
<h3 id="1-3-x-向量组的线性相关"><a href="#1-3-x-向量组的线性相关" class="headerlink" title="[1.3.x] 向量组的线性相关"></a>[1.3.x] 向量组的线性相关</h3><ol>
<li><p>判别向量组线性相关性-数字型</p>
<ul>
<li><code>[Key]</code>两个向量 $\alpha_1,\alpha_2$ 相关 $\Leftrightarrow$ $\alpha_1$ 与 $\alpha_2$ 对应成比例 $\Leftrightarrow$ 方阵 $|\alpha_1,\alpha_2|&#x3D;0$</li>
<li><code>[Key]</code>多个向量 $\alpha_1,\alpha_2,…,\alpha_m$ 相关（无关） $\Leftrightarrow$ $\left{ \begin{array}{rcl}|\alpha_1,…,\alpha_m|&#x3D;0(\neq0)&amp;方阵\r(\alpha_1,…,\alpha_m)&lt;m(&#x3D;m)&amp;非方阵\end{array} \right.$</li>
</ul>
</li>
<li><p>判别向量组线性相关性-抽象型</p>
<ul>
<li><code>[Key·1]</code>逆向思维，复杂矩阵抽离成简单分块矩阵相乘：$(\beta_1,\ \beta_2,\ \beta_3)&#x3D;(\alpha_1,\ \alpha_2,\ \alpha_3)C$<ul>
<li>eg. $(\alpha_1+3\alpha_2,\ 2\alpha_1+4\alpha_2)&#x3D;(\alpha_1,\ \alpha_2)\begin{pmatrix}1&amp;3\2&amp;4\end{pmatrix}$</li>
<li>eg. $(\alpha_1-\alpha_2,\ 2\alpha_2-\alpha_3,\ \alpha_1+\alpha_2+\alpha_3)&#x3D;(\alpha_1,\alpha_2,\alpha_3)\begin{pmatrix}1&amp;0&amp;1\-1&amp;2&amp;1\0&amp;-1&amp;1\end{pmatrix}$</li>
</ul>
</li>
<li><code>[Key·2]</code> $\alpha_1,\alpha_2,\alpha_3$ 线性无关，则：$\left{\begin{array}{rcl}|C|&#x3D;0\Rightarrow\beta_1,\beta_2,\beta_3相关\|C|\neq0\Rightarrow\beta_1,\beta_2,\beta_3无关\end{array} \right.$<ul>
<li>换言之：$\left{\begin{array}{rcl}无关组\cdot不可逆阵\Rightarrow相关\无关组\cdot可逆阵\Rightarrow无关\end{array} \right.$</li>
</ul>
</li>
</ul>
</li>
<li><p>求向量组的秩和极大无关组</p>
<ul>
<li><code>[Key]</code> $r(\alpha_1,\alpha_2,\alpha_3)&#x3D;$ 矩阵 $(\alpha_1,\alpha_2,\alpha_3)$ 的阶梯型中非零行数</li>
<li><code>[Key]</code> $\alpha_1,\alpha_2,\alpha_3$的极大无关组一般取阶梯型“拐弯处”所在列向量<ul>
<li>eg. $(\alpha_1,\alpha_2,\alpha_3)\rightarrow\begin{pmatrix}1&amp;4&amp;1\0&amp;-9&amp;5\0&amp;0&amp;0\0&amp;0&amp;0\end{pmatrix}$，则 $\alpha_1,\alpha_2$可以构成一个极大无关组</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="1-4-x-线性方程组"><a href="#1-4-x-线性方程组" class="headerlink" title="[1.4.x] 线性方程组"></a>[1.4.x] 线性方程组</h3><ol>
<li><p>齐次方程组 $AX&#x3D;O$ 的求解</p>
<ul>
<li><p>$$A_{m\times n}X&#x3D;O\Longrightarrow<br>\left{ \begin{array}{rcl}r(A_{m\times n})&#x3D;n&amp;AX&#x3D;0\ 只有零解&#x2F;唯一解<br>\r(A_{m\times n})&lt;n&amp;A X&#x3D;0\ 有非零解&#x2F;无穷解<br>\end{array}\right.$$</p>
<ul>
<li><code>[Tip]</code>系数矩阵的列数（$A_{m\times n}$ 中的 $n$）就是未知数的个数</li>
</ul>
</li>
<li><p>基础解系：当 $AX&#x3D;O$ 有无穷解时，解集的极大无关组为基础解系</p>
<ul>
<li><code>[Key]</code>基础解系含解向量个数为 $n-r(A)$</li>
<li><code>[Tip]</code> $n-r(A)&#x3D;$ <em>基础解系含解向量个数</em> $\Leftrightarrow$ <em>未知数个数</em>$-$<em>有效方程个数</em>$&#x3D;$<em>自由变量个数</em></li>
</ul>
</li>
<li><p>基础解系求法：</p>
<ul>
<li>把系数矩阵化为<em>行最简形</em>。<ul>
<li>eg. $A\rightarrow\begin{pmatrix}1&amp;0&amp;2&amp;-1\0&amp;1&amp;3&amp;4\0&amp;0&amp;0&amp;0\end{pmatrix}$</li>
</ul>
</li>
<li><em>“非拐弯处变量”</em>作为自由变量，有 $n-r(A)$ 个。<ul>
<li>eg. $\xi_1&#x3D;\begin{pmatrix}-2\-3\1\0\end{pmatrix}$, $\xi_2&#x3D;\begin{pmatrix}-1\-4\0\1\end{pmatrix}$</li>
</ul>
</li>
<li>通解 $X&#x3D;k_1\xi_1+k_2\xi_2\ (k_1,k_2为任意常数)$</li>
</ul>
</li>
</ul>
</li>
<li><p>非齐次方程组 $AX&#x3D;b$ 的求解</p>
<ul>
<li><p>$$<br>A_{m\times n}X&#x3D;b\Longrightarrow<br>\begin{cases}<br>r(A)&#x3D;r(A|b)<br>    \begin{cases}<br>            &lt;n&amp; AX&#x3D;b\ 有无穷解\<br>            &#x3D;n&amp; AX&#x3D;b\ 有唯一解<br>    \end{cases}\<br>r(A)\neq r(A|b)~~~~~~~~~~~~~~AX&#x3D;b\ 无解<br>\end{cases}<br>\nonumber<br>$$</p>
</li>
<li><p><em>非齐次方程组通解</em> $&#x3D;$ <em>齐次方程组通解</em> $+$ <em>非齐次方程组特解</em></p>
<ul>
<li>齐次方程组通解：用<code>1.</code>的方法</li>
<li>非齐次方程组特解：一般令<code>1.</code>中自由变量为0，导出 $\eta$（实际上就对应行最简型的最后一列补0）</li>
</ul>
</li>
<li><p>$AX&#x3D;b$ 通解为 $X&#x3D;k_1\xi_1+k_2\xi_2+…+k_n\xi_n+\eta$</p>
</li>
</ul>
</li>
<li><p>带参方程组求解</p>
<ul>
<li>翻译条件，归纳为无穷解&#x2F;唯一解&#x2F;无解从而得出相应方程关系，再根据<code>1.2.</code>知识求解。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="1-5-x-矩阵的对角化"><a href="#1-5-x-矩阵的对角化" class="headerlink" title="[1.5.x] 矩阵的对角化"></a>[1.5.x] 矩阵的对角化</h3><ol>
<li><p>数值型-特征值与特征向量</p>
<ul>
<li>求 $A$ 特征值方法：由特征方程 $|\lambda E-A|&#x3D;0$ 解得 $\lambda$ 即为 $A$ 的特征值（$|\lambda E-A|$ 称为特征多项式）</li>
<li>求 $A$ 特征向量（对应特征值为 $\lambda_0$）：$(\lambda_0E-A)x&#x3D;0$ 的基础解系</li>
</ul>
</li>
<li><p>抽象型-特征值与特征向量</p>
<ul>
<li><p>已知抽象矩阵的特征值，求关于抽象矩阵的新矩阵特征值</p>
</li>
<li><p>关于 $A$ 的性质：</p>
<ul>
<li><p>几何重数：$\lambda_0$ 是 $A$ 的 $k$ 重特征值，称 $\lambda_0$ 的几何重数是 $k$<br>  代数重数：$\lambda_0$ 对应 $r$ 个线性无关的特征向量（$r$ 为 $V_{\lambda_0}$ 的维数），称 $\lambda_0$ 的代数重数为 $r$</p>
<ul>
<li>几何重数不大于代数重数（$k\le r$）</li>
</ul>
</li>
<li><p>若 $A$ 的特征值为 $\lambda_1,\lambda_2,…,\lambda_n$</p>
<ul>
<li>对应特征向量 $\alpha_1,\alpha_2,…,\alpha_n$ 线性无关</li>
<li>【$A$ 的行列式等于特征值之积】<ul>
<li>$|A|&#x3D;\displaystyle\prod\limits_{i&#x3D;1}^n\lambda_i$，</li>
<li>$|A|&#x3D;0\Rightarrow A$ 至少有一个特征值为0<br>  $|A|\neq0 \Rightarrow A$ 的特征值均非0</li>
</ul>
</li>
<li>【$A$ 的迹等于特征值之和】迹：矩阵主对角线元素和<ul>
<li>$\tr A &#x3D; \displaystyle\sum\limits_{i&#x3D;1}^n\lambda_i$</li>
</ul>
</li>
</ul>
</li>
<li><p>若 $\lambda$ 是 $A$ 特征值，$\alpha$ 是对应特征值的特征向量，有 $A\alpha&#x3D;\lambda\alpha$</p>
</li>
</ul>
</li>
<li><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">$A$</th>
<th align="center">$A^2$</th>
<th align="center">$A^3+5A-6E$</th>
<th align="center">$A^{-1}$</th>
<th align="center">$A^*$</th>
<th align="center">$A^T$</th>
<th align="center">$B\sim A~(B&#x3D;P^{-1}AP)$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">特征值</td>
<td align="center">$\lambda$</td>
<td align="center">$\lambda^2$</td>
<td align="center">$\lambda^3+5\lambda-6$</td>
<td align="center">$\displaystyle\frac{1}{\lambda}$</td>
<td align="center">$\displaystyle\frac{</td>
<td align="center">A</td>
<td align="center">}{\lambda}$</td>
</tr>
<tr>
<td align="center">特征向量</td>
<td align="center">$\alpha$</td>
<td align="center">$\alpha$</td>
<td align="center">$\alpha$</td>
<td align="center">$\alpha$</td>
<td align="center">$\alpha$</td>
<td align="center">不确定</td>
<td align="center">$P^{-1}\alpha$</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>相似矩阵</p>
<ul>
<li>存在可逆矩阵 $P$ 使得 $P^{-1}AP&#x3D;B$，称 $A$ 相似于 $B$，记为 $A\sim B$</li>
<li>性质<ul>
<li>自反性：$A\sim A$</li>
<li>对称性：$A \sim B \Leftrightarrow B\sim A$</li>
<li>传递性：$A \sim B, B\sim C \Leftrightarrow A\sim C$</li>
<li>若 $A\sim B$，则：<ul>
<li>$A,B$ 等价（$C,D$ 等价 $\Leftrightarrow$ 经过若干次初等行变换，使得 $P_iAQ_j&#x3D;B$ （$P_i,Q_i$可逆））</li>
<li>$A,B$ 有相同特征值、行列式与迹</li>
<li>$A,B$ 有相同的秩</li>
<li>$kA\sim kB$</li>
<li>$A^{-1}\sim B^{-1}$</li>
<li>$f(A)\sim f(B)$<ul>
<li>e.g. $3A^2-6A+5E\sim3B^3-6B+5E$</li>
</ul>
</li>
</ul>
</li>
<li>$A^m\sim B^m$</li>
</ul>
</li>
</ul>
</li>
<li><p>矩阵的相似对角化</p>
<ul>
<li><p>若存在可逆矩阵 $P$ ，使 $P^{-1}AP&#x3D;\mit\Lambda$（ $\mit\Lambda$ 为对角矩阵），则称 $A$ 可相似对角化（此时有 $A\sim\mit{\Lambda}$）</p>
</li>
<li><p>判定 $n$ 阶矩阵 $A$ 能否相似对角化</p>
<ul>
<li>充要条件：$A$ 有 $n$ 个线性无关的特征向量<ul>
<li><p>如果一个矩阵的特征值都是不同的，那么它一定可以相似对角化</p>
</li>
<li><p>如果一个矩阵每个特征值的代数重数（特征多项式中的重数）<strong>等于</strong>几何重数（对应该特征值的特征向量的维数）那么它一定<strong>可以</strong>相似对角化</p>
</li>
<li><p>如果一个矩阵的某个特征值的代数重数<strong>大于</strong>它的几何重数，那么它一定<strong>不能</strong>相似对角化</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>把 $A$ 相似对角化的步骤</p>
<ul>
<li><p>求 $A$ 特征值 $\lambda_1,\lambda_2,…,\lambda_n$</p>
</li>
<li><p>求对应特征向量 $\alpha_1,\alpha_2,…,\alpha_n$</p>
</li>
<li><p>令 $P&#x3D;(\alpha_1,\alpha_2,…,\alpha_n)$，则<br>$$<br>P^{-1}AP&#x3D;{\mit \Lambda}&#x3D;{\rm diag}(\lambda_1,\lambda_2,…,\lambda_n)&#x3D;<br>\begin{pmatrix}<br>\lambda_1 &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; \lambda_2 &amp; \cdots &amp; 0 \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>0 &amp; 0 &amp; \cdots &amp; \lambda_n<br>\end{pmatrix}<br>$$</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>实对称矩阵</p>
<ul>
<li><p>实：矩阵元素为实数；对称：方阵，以主对角线为轴对称</p>
</li>
<li><p>特征值为实数；对应特征值为实向量</p>
<ul>
<li>非实对称矩阵就不一定。如 $\begin{pmatrix}0&amp;1\-1&amp;0\end{pmatrix}$ 对应特征方程为 $\lambda^2+1&#x3D;0$，对应的特征值为虚根。</li>
</ul>
</li>
<li><p>互不相等的特征值对应的特征向量间两两正交</p>
</li>
<li><p>所有特征值的几何重数等于代数重数</p>
</li>
</ul>
</li>
<li><p>实对称矩阵的相似对角化·利用相似矩阵</p>
<ul>
<li><p>n阶实对称矩阵 $A$ 必可对角化，且一定存在正交矩阵 $Q$ ，使得 $Q^{-1}AQ&#x3D;Q^TAQ&#x3D;{\rm diag}(\lambda_1,…,\lambda n)$</p>
<ul>
<li>正交矩阵 $Q$ 的性质<ul>
<li><p>$Q^T&#x3D;Q^{-1}$</p>
</li>
<li><p>$Q^TQ&#x3D;QQ^T&#x3D;E$</p>
</li>
<li><p>$|Q|&#x3D;\pm0$</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>把对称阵 $A$ 用正交阵 $Q$ 相似对角化的步骤</p>
<ul>
<li><p>求 $A$ 特征值 $\lambda_1,\lambda_2,…,\lambda_n$</p>
</li>
<li><p>求对应特征向量 $\alpha_1,\alpha_2,…,\alpha_n$</p>
</li>
<li><p>把 $\alpha_1,\alpha_2,…,\alpha_n$ 中不正交的矩阵正交化：</p>
<ul>
<li>若 $\alpha_1,\alpha_2,…$ 不正交，令</li>
</ul>
<p>  $$<br>  \beta_1&#x3D;&amp;\alpha_1\<br>  \beta_2&#x3D;&amp;\alpha_2-\displaystyle\frac{(\alpha_2,\beta_1)}{(\beta_1,\beta_1)}\beta_1\<br>  (\beta_3&#x3D;&amp;\alpha_3-\displaystyle\frac{(\alpha_3,\beta_1)}{(\beta_1,\beta_1)}\beta_1-\frac{(\alpha_3,\beta_2)}{(\beta_2,\beta_2)}\beta_2)\<br>  &amp;…<br>      \nonumber<br>  $$</p>
</li>
<li><p>单位化所有特征向量，得 $\xi_1,\xi_2,…,\xi_n$<br>  $$<br>  \xi_i &#x3D; \displaystyle\frac{\alpha_i}{||\alpha_i||}<br>  \nonumber<br>  $$</p>
</li>
<li><p>令 $Q&#x3D;(\xi_1,\xi_2,…,\xi_n)$，则<br>  $$<br>  Q^{-1}AQ&#x3D;{\mit \Lambda}&#x3D;{\rm diag}(\lambda_1,\lambda_2,…,\lambda_n)&#x3D;<br>  \begin{pmatrix}<br>  \lambda_1 &amp; 0 &amp; \cdots &amp; 0 \<br>  0 &amp; \lambda_2 &amp; \cdots &amp; 0 \<br>  \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>  0 &amp; 0 &amp; \cdots &amp; \lambda_n<br>  \end{pmatrix}<br>  \nonumber<br>  $$</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>单矩阵关系</strong></p>
<ol>
<li>对合矩阵 $A^2&#x3D;E$</li>
<li>幂零矩阵 $A^2&#x3D;0$</li>
<li>对称矩阵 $A^T&#x3D;A$</li>
<li>反对称矩阵 $A^T&#x3D;-A$</li>
<li>正交矩阵 $A^T&#x3D;A^{-1}$</li>
<li>初等矩阵 通过一次初等行&#x2F;列变换就可以得到 $E$ 的矩阵</li>
</ol>
<p><strong>多矩阵关系</strong></p>
<ol>
<li><p>等价</p>
<ul>
<li><p>定义：$PAQ&#x3D;B$</p>
</li>
<li><p><strong>向量组</strong>等价：两个向量组能够相互线性表出 $\Leftrightarrow$ 两向量组维数相同（包含向量数不一定相同）</p>
</li>
<li><p><strong>矩阵</strong>等价：两个<em>同型</em>矩阵能够通过初等变换相互转化 $\Leftrightarrow$ 两<em>同型</em>矩阵秩相等</p>
</li>
</ul>
</li>
<li><p>相似</p>
<ul>
<li>定义：$P^{-1}AP&#x3D;B$</li>
<li>本质：$A$ 和 $B$ 是在<strong>不同基</strong>中的<strong>同一个线性变换</strong></li>
<li>判定：着眼于特征值与特征向量<ul>
<li>【特征值相等】</li>
<li>矩阵的<em>迹</em>是否相等</li>
<li>矩阵的<em>秩</em>是否相等（求解行列式）</li>
<li>矩阵<em>特征值</em>是否相等</li>
<li>【特征值对应的特征向量相等】</li>
<li>$\lambda E-A$ 和 $\lambda E-B$ 的<em>秩</em>是否相等（看多重特征根）</li>
</ul>
</li>
</ul>
</li>
<li><p>合同</p>
<ul>
<li>定义：$P^TAP&#x3D;B$</li>
<li>判定：$A,B$ 均为实数域上的n阶对称矩阵，则A与B在实数域上合同等价于A与B有相同的正、负惯性指数（即正、负特征值的个数相等）</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="1-6-x-二次型"><a href="#1-6-x-二次型" class="headerlink" title="[1.6.x] 二次型"></a>[1.6.x] 二次型</h3><ol>
<li><p>二次型的矩阵表示</p>
<ul>
<li><p>二次型矩阵的三要素</p>
<ul>
<li>$A^T&#x3D;A$</li>
<li>$A$ 的主对角元素为<em>平方项</em>系数</li>
<li>$A$ 的非主对角元素为<em>交叉项系数</em>的一半</li>
</ul>
</li>
<li><p>e.g.<br>$$<br>f(x_1,x_2)&#x3D;&amp;2x_1^2-x_2^2+6x_1x_2\&#x3D;&amp;(x_1,x_2)\begin{pmatrix}2&amp;3\3&amp;-1\end{pmatrix}\begin{pmatrix}x_1\x_2\end{pmatrix}\&#x3D;<br>&amp;x^TAx\</p>
<p>f(x_1,x_2,x_3)&#x3D;&amp;x_1^2+3x_2^2-x_3^2+2x_1x_2+2x_1x_3-3x_2x_3\&#x3D;&amp;<br>(x_1,x_2,x_3)\begin{pmatrix}1&amp;1&amp;1\1&amp;3&amp;-3&#x2F;2\1&amp;-3&#x2F;2&amp;-1\end{pmatrix}\begin{pmatrix}x_1\x_2\x_3\end{pmatrix}\&#x3D;&amp;<br>x^TAx\<br>\nonumber<br>$$</p>
</li>
</ul>
</li>
<li><p>化二次型为标准型</p>
<ul>
<li><p>只有平方项的二次型称为标准形</p>
</li>
<li><p><strong>配方法：</strong></p>
<ul>
<li><p>$$<br>a^2+2ab&amp;&#x3D;&amp;a^2+2ab+b^2-b^2&amp;&#x3D;&amp;(a+b)^2-b^2<br>\a^2+ab&amp;&#x3D;&amp;a^2+2a\frac{b}{2}+(\frac{b}{2})^2-(\frac{b}{2})^2&amp;&#x3D;&amp;(a+\frac{b}{2})^2-\frac{b^2}{4}<br>\a^2+a\Delta&amp;&#x3D;&amp;a^2+2a\frac{\Delta}{2}+(\frac{\Delta}{2})^2-(\frac{\Delta}{2})^2&amp;&#x3D;&amp;(a+\frac{\Delta}{2})^2-\frac{\Delta^2}{4}<br>\nonumber<br>$$</p>
</li>
<li><p>依次配方所有包含 $x_1,x_2,…$ 的项</p>
</li>
<li><p>当所有项都为完全平方项时，换元（以 $f(x_1,x_2,x_3)$ 为例<br>$f&#x3D;&amp;a(p_1x_1+q_1x_2+r_1x_3)^2+<br>b(p_2x_1+q_2x_2+r_2x_3)^2+<br>c(p_3x_1+q_3x_2+r_3x_3)^2\<br>&amp;\rightarrow<br>\left{<br>\begin{aligned}<br>y_1&amp;&#x3D;p_1x_1+q_1x_2+r_1x_3\<br>y_2&amp;&#x3D;p_2x_1+q_2x_2+r_2x_3\<br>y_3&amp;&#x3D;p_3x_1+q_3x_2+r_3x_3<br>\end{aligned}<br>\right.\<br>&amp;\rightarrow<br>\left{<br>\begin{aligned}<br>x_1&amp;&#x3D;s_1x_1+t_1x_2+u_1x_3\<br>x_2&amp;&#x3D;s_2x_1+t_2x_2+u_2x_3\<br>x_3&amp;&#x3D;s_3x_1+t_3x_2+u_3x_3<br>\end{aligned}<br>\right.$</p>
</li>
<li><p>记 $x&#x3D;(x_1,x_2,x_3)^T,y&#x3D;(y_1,y_2,y_3)^T,P&#x3D;<br>\begin{pmatrix}<br>s_1 &amp; t_1 &amp; u_1 \<br>s_2 &amp; t_2 &amp; u_2 \<br>s_3 &amp; t_3 &amp; u_3<br>\end{pmatrix}$</p>
</li>
<li><p>在线性代换 $x&#x3D;Py$ 下，得到标准形：$f&#x3D;ay_1^2+by_2^2+cy_3^2$</p>
<blockquote>
<p>若 $f(x_1,x_2,x_3)$ 无法直接配方，先令：<br>$$<br>\left{<br>\begin{aligned}<br>x_1&amp;&#x3D;y_1+y_2\<br>x_2&amp;&#x3D;y_1-y_2\<br>x_3&amp;&#x3D;y_3<br>\end{aligned}<br>\right.<br>$$</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>正交变化法：</strong></p>
<ul>
<li>写出 $f$ 的矩阵 $A$</li>
<li>求 $A$ 的特征值 $\lambda_1,…,\lambda_n$</li>
<li>求 $A$ 的特征向量 $\alpha_1,…,\alpha_n$</li>
<li>将特征向量中不正交向量的施密特正交化</li>
<li>所有向量单位化得到 $\xi_1,…,\xi_n$</li>
<li>得到正交矩阵 $Q&#x3D;(\xi,…,\xi_n)$</li>
<li>记 $x&#x3D;(x_1,x_2,x_3)^T$，$y&#x3D;(y_1,y_2,y_3)^T$</li>
<li>在线性代换 $x&#x3D;Qy$ 下，得到标准形 $f&#x3D;\lambda_1y_1^2+…+\lambda_ny_n^2$</li>
</ul>
</li>
</ul>
</li>
<li><p>正定二次型和正定矩阵</p>
<ul>
<li><p>概念：对任意 $\boldsymbol x\neq \bold0$，对实二次型 $f$ 有 $f&#x3D;\boldsymbol x^TA\boldsymbol x&gt;0$，称 $f$ 为正定二次型，$A$ 为正定矩阵</p>
</li>
<li><p>$A$ 为实对称矩阵 $\Leftrightarrow$ $A$ 正定</p>
</li>
<li><p>二次型 $f$ 正定 &#x2F; 矩阵 $A$ 正定的判定方法（主要）</p>
<ul>
<li><p>$A$ 的特征值全大于零（即 $f$ 的正惯性指数&#x3D;&#x3D;未知数个数）</p>
<ul>
<li>正惯性指数：标准形中正平方项的个数</li>
</ul>
</li>
<li><p>$A$ 的各阶顺序主子式皆大于零</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="1-7-x-线性空间与线性变换"><a href="#1-7-x-线性空间与线性变换" class="headerlink" title="[1.7.x] 线性空间与线性变换"></a>[1.7.x] 线性空间与线性变换</h3><ol>
<li><p>线性空间</p>
<ul>
<li><p>定义：$V$ 是集合， $V$ 满足加法、数乘封闭</p>
</li>
<li><p>基（<em>类比向量组的极大无关组</em>）</p>
<ul>
<li>$V$ 中能线性表示 $V$ 中任意向量的向量组 $a_1,…,a_m$ 是一组基</li>
</ul>
</li>
<li><p>维数（<em>类比向量组的秩</em>）</p>
<ul>
<li>$V$ 中一组基中包含向量的数目 $m$ 是 $V$ 的维数，记作 ${\rm div}(V)&#x3D;m$</li>
</ul>
</li>
<li><p>$n$ 维实向量空间</p>
<ul>
<li>所有 $n$ 维实向量构成的集合，记作 $R^n$</li>
<li>$n$ 维基本向量组 $\xi_1,…,\xi_n$ 是 $R^n$ 一组基<ul>
<li>eg. $R^3$ 一组基为 $\begin{pmatrix}1 \0 \0\end{pmatrix},<br>  \begin{pmatrix}0 \1 \0\end{pmatrix},<br>  \begin{pmatrix}0 \0 \1\end{pmatrix}$</li>
</ul>
</li>
<li><code>[Tip]</code>任意 $n$ 个线性无关的 $n$ 维实向量一定能构成 $R^n$ 一组基</li>
<li><code>[Tip]</code>方阵 $A_{n\times n}$ 满秩（$|A|\neq0$），则 $A$ 行&#x2F;列向量一定能构成 $R^n$ 一组基</li>
</ul>
</li>
<li><p>向量在基下的坐标</p>
<ul>
<li><p>设向量空间 $V$ 有一组基 ${e_1,\dots,e_n}$，对于 $V$ 中的任意向量 $\beta$，它可以表示为基向量的线性组合：$\beta&#x3D;a_1e_1+\dots+a_ne_n&#x3D;(e_1,\dots,e_n)(a_1,a_2,\dots,a_n)^T$</p>
<p>  称 $(a_1,a_2,\dots,a_n)^T$ 为向量 $\beta$ 在基 ${e_1,\dots,e_n}$ 下的坐标。</p>
</li>
<li><p><code>[Tip]</code> $R^n$ 有无数组基</p>
</li>
<li><p><code>[Tip]</code> 同一向量在一组基下坐标唯一，在不同基下坐标不同</p>
</li>
</ul>
</li>
<li><p>过渡矩阵</p>
<ul>
<li>同一向量空间下不同基变换使用的矩阵</li>
<li>设 $V$ 下有两组基 ${\alpha_1,\dots,\alpha_n},{\ \beta_1,\dots,\beta_n}$，其向量组分别记为$A,B$<br>  $A&#x3D;BC_{m\times m}$，则 $C$ 是 $B$ 到 $A$ 的过渡矩阵</li>
<li>若 $\beta$ 在两组基下坐标分别为 $x&#x3D;(x_1,\dots,x_n)^T,x’&#x3D;(x_1’,\dots,x_n’)^T$<br>  称 $x&#x3D;Cx’$ 或 $x’&#x3D;C^{-1}x$ 为坐标变换公式</li>
</ul>
</li>
<li><p>向量的内积、长度和夹角</p>
<ul>
<li>设 $\alpha &#x3D; (\alpha_1,\dots,\alpha_m)^T,\beta&#x3D;(\beta_1,\dots,\beta_m)^T$</li>
<li>内积：$(\alpha,\beta)&#x3D;\sum\alpha_i\beta_i$（点乘，相当于 $\alpha·\beta$）<ul>
<li>$(\alpha,\beta)&#x3D;0$，称 $\alpha,\beta$ 正交</li>
</ul>
</li>
<li>长度：$\lVert\alpha\rVert&#x3D;\sqrt{(\alpha,\alpha)}$<ul>
<li>$\lVert\alpha\rVert&#x3D;0\Leftrightarrow\alpha&#x3D;\mathbf{0}$</li>
<li>单位向量：长度为1</li>
<li>单位化：$\alpha\rightarrow\displaystyle\frac{\alpha}{\sqrt{(\alpha,\alpha)}}$</li>
</ul>
</li>
<li>夹角：$\langle\alpha,\beta\rangle&#x3D;{\rm arccos}\displaystyle\frac{(\alpha,\beta)}{\lVert\alpha\rVert\lVert\beta\rVert}$</li>
</ul>
</li>
<li><p>正交向量组与正交基</p>
<ul>
<li>正交向量组：一组非零且两两正交的向量组</li>
<li>正交基：基为正交向量组</li>
<li>标准正交基&#x2F;规范正交基：基为正交向量组且每个基为单位向量</li>
</ul>
</li>
<li><p>向量组的正交化和单位化</p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>blog-test</title>
    <url>/2023/07/06/blog-test/</url>
    <content><![CDATA[<h1 id="编思小抄"><a href="#编思小抄" class="headerlink" title="编思小抄"></a>编思小抄</h1><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">范围（2^x^）</th>
<th align="center">最大范围（10^x^）</th>
<th align="center">格式化控制符</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>unsigned int</strong></td>
<td align="center">[0,2^32^-1]</td>
<td align="center">10^9^</td>
<td align="center"><code>%u</code></td>
</tr>
<tr>
<td align="center"><strong>int</strong></td>
<td align="center">[-2^31^,2^31^-1]</td>
<td align="center">10^9^</td>
<td align="center"><code>%d</code></td>
</tr>
<tr>
<td align="center"><strong>long long</strong></td>
<td align="center">[-2^63^,2^63^-1]</td>
<td align="center">10^18^</td>
<td align="center"><code>%lld</code></td>
</tr>
<tr>
<td align="center"><strong>unsigned long long</strong></td>
<td align="center">[0,2^64^-1]</td>
<td align="center">10^19^</td>
<td align="center"><code>%llu</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><table>
<thead>
<tr>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>32</strong></td>
<td align="center"></td>
<td align="center"><strong>48</strong></td>
<td align="center">0</td>
<td align="center"><strong>64</strong></td>
<td align="center">@</td>
<td align="center"><strong>80</strong></td>
<td align="center">P</td>
<td align="center">**96 **</td>
<td align="center">&#96;</td>
<td align="center"><strong>112</strong></td>
<td align="center">p</td>
</tr>
<tr>
<td align="center"><strong>33</strong></td>
<td align="center">!</td>
<td align="center"><strong>49</strong></td>
<td align="center">1</td>
<td align="center"><strong>65</strong></td>
<td align="center">A</td>
<td align="center"><strong>81</strong></td>
<td align="center">Q</td>
<td align="center">**97 **</td>
<td align="center">a</td>
<td align="center"><strong>113</strong></td>
<td align="center">q</td>
</tr>
<tr>
<td align="center"><strong>34</strong></td>
<td align="center">“</td>
<td align="center"><strong>50</strong></td>
<td align="center">2</td>
<td align="center"><strong>66</strong></td>
<td align="center">B</td>
<td align="center"><strong>82</strong></td>
<td align="center">R</td>
<td align="center">**98 **</td>
<td align="center">b</td>
<td align="center"><strong>114</strong></td>
<td align="center">r</td>
</tr>
<tr>
<td align="center"><strong>35</strong></td>
<td align="center">#</td>
<td align="center"><strong>51</strong></td>
<td align="center">3</td>
<td align="center"><strong>67</strong></td>
<td align="center">C</td>
<td align="center"><strong>83</strong></td>
<td align="center">S</td>
<td align="center">**99 **</td>
<td align="center">c</td>
<td align="center"><strong>115</strong></td>
<td align="center">s</td>
</tr>
<tr>
<td align="center"><strong>36</strong></td>
<td align="center">$</td>
<td align="center"><strong>52</strong></td>
<td align="center">4</td>
<td align="center"><strong>68</strong></td>
<td align="center">D</td>
<td align="center"><strong>84</strong></td>
<td align="center">T</td>
<td align="center"><strong>100</strong></td>
<td align="center">d</td>
<td align="center"><strong>116</strong></td>
<td align="center">t</td>
</tr>
<tr>
<td align="center"><strong>37</strong></td>
<td align="center">%</td>
<td align="center"><strong>53</strong></td>
<td align="center">5</td>
<td align="center"><strong>69</strong></td>
<td align="center">E</td>
<td align="center"><strong>85</strong></td>
<td align="center">U</td>
<td align="center"><strong>101</strong></td>
<td align="center">e</td>
<td align="center"><strong>117</strong></td>
<td align="center">u</td>
</tr>
<tr>
<td align="center"><strong>38</strong></td>
<td align="center">&amp;</td>
<td align="center"><strong>54</strong></td>
<td align="center">6</td>
<td align="center"><strong>70</strong></td>
<td align="center">F</td>
<td align="center"><strong>86</strong></td>
<td align="center">V</td>
<td align="center"><strong>102</strong></td>
<td align="center">f</td>
<td align="center"><strong>118</strong></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center"><strong>39</strong></td>
<td align="center">‘</td>
<td align="center"><strong>55</strong></td>
<td align="center">7</td>
<td align="center"><strong>71</strong></td>
<td align="center">G</td>
<td align="center"><strong>87</strong></td>
<td align="center">W</td>
<td align="center"><strong>103</strong></td>
<td align="center">g</td>
<td align="center"><strong>119</strong></td>
<td align="center">w</td>
</tr>
<tr>
<td align="center"><strong>40</strong></td>
<td align="center">(</td>
<td align="center"><strong>56</strong></td>
<td align="center">8</td>
<td align="center"><strong>72</strong></td>
<td align="center">H</td>
<td align="center"><strong>88</strong></td>
<td align="center">X</td>
<td align="center"><strong>104</strong></td>
<td align="center">h</td>
<td align="center"><strong>120</strong></td>
<td align="center">x</td>
</tr>
<tr>
<td align="center"><strong>41</strong></td>
<td align="center">)</td>
<td align="center"><strong>57</strong></td>
<td align="center">9</td>
<td align="center"><strong>73</strong></td>
<td align="center">I</td>
<td align="center"><strong>89</strong></td>
<td align="center">Y</td>
<td align="center"><strong>105</strong></td>
<td align="center">i</td>
<td align="center"><strong>121</strong></td>
<td align="center">y</td>
</tr>
<tr>
<td align="center"><strong>42</strong></td>
<td align="center">*</td>
<td align="center"><strong>58</strong></td>
<td align="center">:</td>
<td align="center"><strong>74</strong></td>
<td align="center">J</td>
<td align="center"><strong>90</strong></td>
<td align="center">Z</td>
<td align="center"><strong>106</strong></td>
<td align="center">j</td>
<td align="center"><strong>122</strong></td>
<td align="center">z</td>
</tr>
<tr>
<td align="center"><strong>43</strong></td>
<td align="center">+</td>
<td align="center"><strong>59</strong></td>
<td align="center">;</td>
<td align="center"><strong>75</strong></td>
<td align="center">K</td>
<td align="center"><strong>91</strong></td>
<td align="center">[</td>
<td align="center"><strong>107</strong></td>
<td align="center">k</td>
<td align="center"><strong>123</strong></td>
<td align="center">{</td>
</tr>
<tr>
<td align="center"><strong>44</strong></td>
<td align="center">,</td>
<td align="center"><strong>60</strong></td>
<td align="center">&lt;</td>
<td align="center"><strong>76</strong></td>
<td align="center">L</td>
<td align="center"><strong>92</strong></td>
<td align="center">\</td>
<td align="center"><strong>108</strong></td>
<td align="center">l</td>
<td align="center"><strong>124</strong></td>
<td align="center">|</td>
</tr>
<tr>
<td align="center"><strong>45</strong></td>
<td align="center">-</td>
<td align="center"><strong>61</strong></td>
<td align="center">&#x3D;</td>
<td align="center"><strong>77</strong></td>
<td align="center">M</td>
<td align="center"><strong>93</strong></td>
<td align="center">]</td>
<td align="center"><strong>109</strong></td>
<td align="center">m</td>
<td align="center"><strong>125</strong></td>
<td align="center">}</td>
</tr>
<tr>
<td align="center"><strong>46</strong></td>
<td align="center">.</td>
<td align="center"><strong>62</strong></td>
<td align="center">&gt;</td>
<td align="center"><strong>78</strong></td>
<td align="center">N</td>
<td align="center"><strong>94</strong></td>
<td align="center">^</td>
<td align="center"><strong>110</strong></td>
<td align="center">n</td>
<td align="center"><strong>126</strong></td>
<td align="center">~</td>
</tr>
<tr>
<td align="center"><strong>47</strong></td>
<td align="center">&#x2F;</td>
<td align="center"><strong>63</strong></td>
<td align="center">?</td>
<td align="center"><strong>79</strong></td>
<td align="center">O</td>
<td align="center"><strong>95</strong></td>
<td align="center">_</td>
<td align="center"><strong>111</strong></td>
<td align="center">o</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<hr>
<h2 id="数组传参"><a href="#数组传参" class="headerlink" title="数组传参"></a>数组传参</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">char</span> s[<span class="number">10</span>])</span>; <span class="comment">// f(char *s)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">10</span>] = <span class="string">&quot;LeeHero&quot;</span>;</span><br><span class="line">    f(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">char</span> s[][<span class="number">10</span>])</span>; <span class="comment">// f(char (*s)[10])</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">5</span>][<span class="number">10</span>] = &#123;<span class="string">&quot;Lee&quot;</span>,<span class="string">&quot;Hero&quot;</span>&#125;;</span><br><span class="line">    f(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><h3 id="GCD-x2F-LCM"><a href="#GCD-x2F-LCM" class="headerlink" title="GCD&#x2F;LCM"></a>GCD&#x2F;LCM</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> b&gt;<span class="number">0</span>?gcd(b,a%b):a; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a/gcd(a,b)*b; &#125;</span><br></pre></td></tr></table></figure>



<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="一般模板"><a href="#一般模板" class="headerlink" title="一般模板"></a>一般模板</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> x1 = *(<span class="type">int</span> *)a;</span><br><span class="line">    <span class="type">int</span> x2 = *(<span class="type">int</span> *)b;</span><br><span class="line">    <span class="keyword">return</span> x1-x2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">90</span>, <span class="number">80</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), i;</span><br><span class="line">    qsort(arr, n, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> usr[<span class="number">20</span>]; <span class="type">char</span> dom[<span class="number">20</span>];</span><br><span class="line">&#125; EMAIL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">	EMAIL *A = (EMAIL *)a;</span><br><span class="line">	EMAIL *B = (EMAIL *)b;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(A -&gt; dom, B -&gt; dom) == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">strcmp</span>(B -&gt; usr, A -&gt; usr);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">strcmp</span>(A -&gt; dom, B -&gt; dom);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	EMAIL *data = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    EMAIL *data = (EMAIL *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EMAIL)*(T+<span class="number">10</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">		<span class="type">char</span> ads[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;ads);</span><br><span class="line">		<span class="built_in">strcpy</span>((data+i) -&gt; usr, GetUsr(ads));</span><br><span class="line">		<span class="built_in">strcpy</span>((data+i) -&gt; dom, GetDom(ads));</span><br><span class="line">	&#125;</span><br><span class="line">	qsort(data, T, <span class="keyword">sizeof</span>(EMAIL), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s@%s\n&quot;</span>, data[i].usr, data[i].dom);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维定长数组排序"><a href="#二维定长数组排序" class="headerlink" title="二维定长数组排序"></a>二维定长数组排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">	<span class="type">char</span> *n1 = (<span class="type">char</span> *)a;</span><br><span class="line">    <span class="type">char</span> *n2 = (<span class="type">char</span> *)b;</span><br><span class="line">	<span class="keyword">return</span> myStrCmp(n1, n2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> c; <span class="type">int</span> i = <span class="number">0</span>; <span class="type">char</span> words[<span class="number">120</span>][<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, words[i++]);</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, words[i++]); &#125;</span><br><span class="line">    qsort(words, i, <span class="keyword">sizeof</span>(words[<span class="number">0</span>]), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, words[j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维动态数组排序"><a href="#二维动态数组排序" class="headerlink" title="二维动态数组排序"></a>二维动态数组排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">	<span class="type">int</span> *n1 = *((<span class="type">int</span> **)a);</span><br><span class="line">	<span class="type">int</span> *n2 = *((<span class="type">int</span> **)b);</span><br><span class="line">	<span class="keyword">return</span> *(n1+<span class="number">1</span>) - *(n2+<span class="number">1</span>); <span class="comment">//cmp car[x][1] &amp; car[y][1]</span></span><br><span class="line">&#125;                             <span class="comment">//belike ((int *)a)[1]-((int *)b)[1]</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n, t; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;t);</span><br><span class="line">	<span class="type">int</span> **car = (<span class="type">int</span> **)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">3</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">		*(car+i) = p;</span><br><span class="line">	&#125;</span><br><span class="line">    qsort(car, n, <span class="keyword">sizeof</span>(car[<span class="number">0</span>]), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p1 = *((<span class="type">char</span> **)a);</span><br><span class="line">    <span class="type">char</span> *p2 = *((<span class="type">char</span> **)b);</span><br><span class="line">    <span class="comment">//通过 *(p1+i) *(p2+i) 操作就可以解析到[一级指针所指字符串]的每个字符</span></span><br><span class="line">    <span class="comment">//从而做进一步的比较处理</span></span><br><span class="line">    <span class="comment">/* 后续省略 */</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> N; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N); <span class="type">char</span> **email;</span><br><span class="line">    email = (<span class="type">char</span> **)<span class="built_in">malloc</span>(N * <span class="keyword">sizeof</span>(<span class="type">char</span>*))； <span class="comment">//char *email[N]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        LEN = <span class="built_in">strlen</span>(s);</span><br><span class="line">        p = (<span class="type">char</span> *)<span class="built_in">malloc</span>((LEN+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(p, s);</span><br><span class="line">        *(email + i) = p;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(email, N, <span class="keyword">sizeof</span>(email[<span class="number">0</span>]), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*(email+i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="大整数"><a href="#大整数" class="headerlink" title="大整数"></a>大整数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> cnt, v[<span class="number">1000</span>];	<span class="comment">//个位在前存储</span></span><br><span class="line">&#125; BIGINT;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">int2BIG</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="comment">//int转BIGINT</span></span><br><span class="line">	BIGINT r = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		r.v[r.cnt++] = x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">char2BIG</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	R.cnt = len;</span><br><span class="line">	<span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		R.v[len - <span class="number">1</span> - i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBIG</span><span class="params">(BIGINT a)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (a.cnt == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> len = a.cnt, i;</span><br><span class="line">	<span class="keyword">while</span> (a.v[len - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">		len--;</span><br><span class="line">	<span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a.v[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">mul</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;	<span class="comment">//两个大整数相乘</span></span><br><span class="line">	<span class="keyword">if</span> (S.cnt == <span class="number">0</span> || T.cnt == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> int2BIG(<span class="number">0</span>);</span><br><span class="line">	BIGINT R = &#123;S.cnt + T.cnt, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> t, k, j;</span><br><span class="line">		<span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S.cnt; j++) &#123;</span><br><span class="line">			t = S.v[j] * T.v[i] + carry + R.v[i + j];</span><br><span class="line">			R.v[i + j] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		k = i + j;</span><br><span class="line">		<span class="keyword">while</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			t = carry + R.v[k];</span><br><span class="line">			R.v[k] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (R.v[S.cnt + T.cnt - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">		R.cnt--; <span class="comment">//最高位0不统计在一个大整数的位数中</span></span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">add</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;	<span class="comment">//两个大整数相加</span></span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> i, carry = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S.cnt &amp;&amp; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> temp = (S.v[i] + T.v[i] + carry);</span><br><span class="line">		R.v[i] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; S.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = S.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; T.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = T.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (carry) &#123;</span><br><span class="line">		R.v[i++] = carry % <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	R.cnt = i;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;	<span class="comment">//两个大整数的比较</span></span><br><span class="line">	<span class="type">int</span> n = (S.cnt &gt; T.cnt) ? S.cnt : T.cnt;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (*(S.v + i) &gt; *(T.v + i))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*(S.v + i) &lt; * (T.v + i))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SUB</span><span class="params">(BIGINT *S, BIGINT *T, BIGINT *result)</span> &#123; <span class="comment">//大数减小数</span></span><br><span class="line">	<span class="type">int</span> n = (S-&gt;cnt &gt; T-&gt;cnt) ? S-&gt;cnt : T-&gt;cnt;</span><br><span class="line">	result-&gt;cnt = n;</span><br><span class="line">	<span class="type">int</span> carry = <span class="number">0</span>, i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((*(S-&gt;v + i) + carry) &lt; (*(T-&gt;v + i))) &#123;</span><br><span class="line">			*(result-&gt;v + i) = <span class="number">10</span> + *(S-&gt;v + i) + carry - *(T-&gt;v + i);</span><br><span class="line">			carry = <span class="number">-1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			*(result-&gt;v + i) = *(S-&gt;v + i) + carry - *(T-&gt;v + i);</span><br><span class="line">			carry = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; !result-&gt;v[i]; i--)</span><br><span class="line">		result-&gt;cnt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">BIGSUB</span><span class="params">(BIGINT S, BIGINT T, <span class="type">int</span> *sign)</span> &#123;</span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	*sign = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (cmp(S, T) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		*sign = <span class="number">1</span>;</span><br><span class="line">		SUB(&amp;S, &amp;T, &amp;R);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		*sign = <span class="number">-1</span>;</span><br><span class="line">		SUB(&amp;T, &amp;S, &amp;R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> s1[<span class="number">600</span>], s2[<span class="number">600</span>];</span><br><span class="line">	BIGINT a = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;, b = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;, c = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>, s1, s2) != EOF) &#123;</span><br><span class="line">		a = char2BIG(s1);</span><br><span class="line">		b = char2BIG(s2);</span><br><span class="line">		c = BIGSUB(a, b, &amp;sign);</span><br><span class="line">		<span class="keyword">if</span> (sign == <span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		printBIG(c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> mod[] = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">A2dec</span><span class="params">(<span class="type">char</span> *sol, <span class="type">int</span> A)</span> &#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(sol);</span><br><span class="line">	<span class="type">int</span> weight = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sol[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; sol[i] &lt;= <span class="string">&#x27;z&#x27;</span>) sol[i] -= <span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = len<span class="number">-1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">		<span class="type">int</span> j;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(mod); j++) <span class="keyword">if</span> (mod[j] == sol[i]) <span class="keyword">break</span>;</span><br><span class="line">		ans += j*weight;</span><br><span class="line">		weight *= A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec2B</span><span class="params">(<span class="type">int</span> dec,<span class="type">int</span> B,<span class="type">char</span> *ans)</span> &#123;</span><br><span class="line">	<span class="type">char</span> temp[<span class="number">50</span>]; <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (dec == <span class="number">0</span>) temp[i++] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">while</span> (dec) &#123;</span><br><span class="line">		temp[i++] = mod[dec%B];</span><br><span class="line">		dec /= B;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = i<span class="number">-1</span>; j &gt; <span class="number">-1</span>; j--) &#123;</span><br><span class="line">		ans[k++] = temp[j];</span><br><span class="line">	&#125;</span><br><span class="line">	ans[k] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> A, B; <span class="comment">// A为起始，B为目标</span></span><br><span class="line">	<span class="type">char</span> sol[<span class="number">50</span>]; <span class="comment">// 转换数据</span></span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %s %d&quot;</span>, &amp;A, &amp;sol, &amp;B); </span><br><span class="line">	<span class="type">int</span> dec;</span><br><span class="line">	dec = A2dec(sol,A);</span><br><span class="line">	<span class="type">char</span> ans[<span class="number">50</span>];</span><br><span class="line">	dec2B(dec,B,ans);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="台阶走法"><a href="#台阶走法" class="headerlink" title="台阶走法"></a>台阶走法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> cnt, v[SIZE];</span><br><span class="line">&#125; BIGINT;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBIG</span><span class="params">(BIGINT b)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.cnt; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b.v[b.cnt - <span class="number">1</span> - i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">int2BIG</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">	BIGINT r = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">//对0特判，但是没做0的add和mul </span></span><br><span class="line">	<span class="keyword">while</span> (x) &#123;</span><br><span class="line">		r.v[r.cnt++] = x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="number">0</span>) r.cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">string2BIG</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">	BIGINT r = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	r.cnt = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r.cnt; i++)</span><br><span class="line">		r.v[r.cnt - <span class="number">1</span> - i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">BIGINT <span class="title function_">mul</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (S.cnt == <span class="number">0</span> || T.cnt == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> int2BIG(<span class="number">0</span>);</span><br><span class="line">	BIGINT R = &#123;S.cnt + T.cnt, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> t, k, j;</span><br><span class="line">		<span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S.cnt; j++) &#123;</span><br><span class="line">			t = S.v[j] * T.v[i] + carry + R.v[i + j];</span><br><span class="line">			R.v[i + j] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		k = i + j;</span><br><span class="line">		<span class="keyword">while</span> (carry) &#123;</span><br><span class="line">			t = carry + R.v[k];</span><br><span class="line">			R.v[k] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (R.v[S.cnt + T.cnt - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">		R.cnt--;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">add</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;</span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> i, carry = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S.cnt &amp;&amp; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> temp = (S.v[i] + T.v[i] + carry);</span><br><span class="line">		R.v[i] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; S.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = S.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; T.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = T.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (carry)</span><br><span class="line">		R.v[i++] = carry % <span class="number">10</span>;</span><br><span class="line">	R.cnt = i;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ull hash[101] = &#123;0&#125;;</span></span><br><span class="line">BIGINT hash[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt;= <span class="number">1</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 1;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 2;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 4;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">4</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 8;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">8</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//hash[i] = hash[i - 1] + hash[i - 2] + hash[i - 3] + hash[i - 4];</span></span><br><span class="line">			BIGINT r1 = add(hash[i - <span class="number">1</span>], hash[i - <span class="number">2</span>]);</span><br><span class="line">			BIGINT r2 = add(hash[i - <span class="number">3</span>], hash[i - <span class="number">4</span>]);</span><br><span class="line">			hash[i] = add(r1, r2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">		<span class="type">int</span> ptA, ptB; <span class="comment">//path A/B</span></span><br><span class="line">		<span class="type">int</span> stB, stS; <span class="comment">//Start Building/Step</span></span><br><span class="line">		<span class="type">int</span> edB, edS; <span class="comment">//End Building/Step</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;ptA, &amp;ptB, &amp;stB, &amp;stS, &amp;edB, &amp;edS);</span><br><span class="line">		<span class="comment">//ull ans;</span></span><br><span class="line">		BIGINT ans = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">		<span class="keyword">if</span> (stB == edB) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ptA &lt; stS || ptB &gt; edS) &#123;</span><br><span class="line">				ans = hash[edS - stS];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//ans = hash[edS - ptB] * hash[ptB - ptA] * hash[ptA - stS] + hash[edS - stS];</span></span><br><span class="line">				BIGINT r1 = mul(hash[edS - ptB], hash[ptB - ptA]);</span><br><span class="line">				BIGINT r2 = mul(r1, hash[ptA - stS]);</span><br><span class="line">				ans = add(r2, hash[edS - stS]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (stB != edB) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ptA &lt; stS &amp;&amp; ptB &gt; edS || ptA &gt; edS || ptB &lt; stS) &#123; </span><br><span class="line">			<span class="comment">/*B走廊在起点下方；A走廊在终点上方；AB包夹起点和终点*/</span> </span><br><span class="line">				<span class="comment">//ans = 0;</span></span><br><span class="line">				ans = int2BIG(<span class="number">0</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ptA &lt; stS) &#123;</span><br><span class="line">				<span class="comment">//ans = hash[ptB - stS] * hash[edS - ptB];</span></span><br><span class="line">				ans = mul(hash[ptB - stS], hash[edS - ptB]);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ptB &gt; edS) &#123;</span><br><span class="line">				<span class="comment">//ans = hash[ptA - stS] * hash[edS - ptA];</span></span><br><span class="line">				ans = mul(hash[ptA - stS], hash[edS - ptA]);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//ans = hash[ptB - stS] * hash[edS - ptB] + hash[ptA - stS] * hash[edS - ptA];</span></span><br><span class="line">				BIGINT r1 = mul(hash[ptB - stS], hash[edS - ptB]);</span><br><span class="line">				BIGINT r2 = mul(hash[ptA - stS], hash[edS - ptA]);</span><br><span class="line">				ans = add(r1, r2);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//printf(&quot;case #%d:\n%llu\n&quot;, i, ans);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;case #%d:\n&quot;</span>, i); printBIG(ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="皇后问题"><a href="#皇后问题" class="headerlink" title="皇后问题"></a>皇后问题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Danger</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="comment">/*Q的可攻击路径标记为D，遇到另外的Q则停止，并且把Q变为O*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>; k &lt; n; k++) &#123; <span class="comment">// 下 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][j] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][j] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i<span class="number">-1</span>; k &gt; <span class="number">-1</span>; k--) &#123; <span class="comment">// 上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][j] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][j] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = j+<span class="number">1</span>; k &lt; n; k++) &#123; <span class="comment">// 右 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[i][k] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[i][k] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = j<span class="number">-1</span>; k &gt; <span class="number">-1</span>; k--) &#123; <span class="comment">// 左 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[i][k] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[i][k] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>, l = j+<span class="number">1</span>; k &lt; n &amp;&amp; l &lt; n; k++, l++) &#123; <span class="comment">// 右下 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i<span class="number">-1</span>, l = j+<span class="number">1</span>; k &gt; <span class="number">-1</span> &amp;&amp; l &lt; n; k--, l++) &#123; <span class="comment">// 右上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i<span class="number">-1</span>, l = j<span class="number">-1</span>; k &gt; <span class="number">-1</span> &amp;&amp; l &gt; <span class="number">-1</span>; k--, l--) &#123; <span class="comment">// 左上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>, l = j<span class="number">-1</span>; k &lt; n &amp;&amp; l &gt; <span class="number">-1</span>; k++, l--) &#123; <span class="comment">// 左上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Safe</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span>;</span><br><span class="line">	<span class="comment">/*q的移动路径上若为E，标记为S，遇到Q变为S后停止，遇到O直接停止*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">SafeCnter</span><span class="params">(<span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="comment">/*统计地图中S的数目*/</span></span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">&#x27;S&#x27;</span>) cnt++; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Show</span><span class="params">(<span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span>；</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n; <span class="type">char</span> c;</span><br><span class="line">	<span class="type">char</span> <span class="built_in">map</span>[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line">	<span class="type">int</span> Qpos[<span class="number">20000</span>][<span class="number">2</span>]; <span class="type">int</span> Qind = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> qpos[<span class="number">2</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	c = getchar();</span><br><span class="line">	<span class="comment">/*读取地图*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">				Qpos[Qind][<span class="number">0</span>] = i; Qpos[Qind][<span class="number">1</span>] = j;</span><br><span class="line">				Qind++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">&#x27;q&#x27;</span>) &#123;</span><br><span class="line">				qpos[<span class="number">0</span>] = i; qpos[<span class="number">1</span>] = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		c = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;Qind:%d\n&quot;, Qind);</span></span><br><span class="line">	<span class="comment">/*标记危险格子*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Qind; i++) &#123;</span><br><span class="line">		<span class="type">int</span> Qi = Qpos[i][<span class="number">0</span>], Qj = Qpos[i][<span class="number">1</span>];</span><br><span class="line">		<span class="comment">//printf(&quot;Qi:%d Qj:%d\n&quot;,Qi, Qj);</span></span><br><span class="line">		Danger(Qi, Qj, <span class="built_in">map</span>, n);</span><br><span class="line">	&#125;</span><br><span class="line">	Safe(qpos[<span class="number">0</span>], qpos[<span class="number">1</span>], <span class="built_in">map</span>, n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SafeCnter(<span class="built_in">map</span>, n)); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
