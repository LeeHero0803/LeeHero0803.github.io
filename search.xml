<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog-test</title>
    <url>/2023/07/06/blog-test/</url>
    <content><![CDATA[<h1 id="编思小抄"><a href="#编思小抄" class="headerlink" title="编思小抄"></a>编思小抄</h1><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">范围（2^x^）</th>
<th align="center">最大范围（10^x^）</th>
<th align="center">格式化控制符</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>unsigned int</strong></td>
<td align="center">[0,2^32^-1]</td>
<td align="center">10^9^</td>
<td align="center"><code>%u</code></td>
</tr>
<tr>
<td align="center"><strong>int</strong></td>
<td align="center">[-2^31^,2^31^-1]</td>
<td align="center">10^9^</td>
<td align="center"><code>%d</code></td>
</tr>
<tr>
<td align="center"><strong>long long</strong></td>
<td align="center">[-2^63^,2^63^-1]</td>
<td align="center">10^18^</td>
<td align="center"><code>%lld</code></td>
</tr>
<tr>
<td align="center"><strong>unsigned long long</strong></td>
<td align="center">[0,2^64^-1]</td>
<td align="center">10^19^</td>
<td align="center"><code>%llu</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><table>
<thead>
<tr>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
<th align="center">Dec</th>
<th align="center">Char</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>32</strong></td>
<td align="center"></td>
<td align="center"><strong>48</strong></td>
<td align="center">0</td>
<td align="center"><strong>64</strong></td>
<td align="center">@</td>
<td align="center"><strong>80</strong></td>
<td align="center">P</td>
<td align="center">**96 **</td>
<td align="center">&#96;</td>
<td align="center"><strong>112</strong></td>
<td align="center">p</td>
</tr>
<tr>
<td align="center"><strong>33</strong></td>
<td align="center">!</td>
<td align="center"><strong>49</strong></td>
<td align="center">1</td>
<td align="center"><strong>65</strong></td>
<td align="center">A</td>
<td align="center"><strong>81</strong></td>
<td align="center">Q</td>
<td align="center">**97 **</td>
<td align="center">a</td>
<td align="center"><strong>113</strong></td>
<td align="center">q</td>
</tr>
<tr>
<td align="center"><strong>34</strong></td>
<td align="center">“</td>
<td align="center"><strong>50</strong></td>
<td align="center">2</td>
<td align="center"><strong>66</strong></td>
<td align="center">B</td>
<td align="center"><strong>82</strong></td>
<td align="center">R</td>
<td align="center">**98 **</td>
<td align="center">b</td>
<td align="center"><strong>114</strong></td>
<td align="center">r</td>
</tr>
<tr>
<td align="center"><strong>35</strong></td>
<td align="center">#</td>
<td align="center"><strong>51</strong></td>
<td align="center">3</td>
<td align="center"><strong>67</strong></td>
<td align="center">C</td>
<td align="center"><strong>83</strong></td>
<td align="center">S</td>
<td align="center">**99 **</td>
<td align="center">c</td>
<td align="center"><strong>115</strong></td>
<td align="center">s</td>
</tr>
<tr>
<td align="center"><strong>36</strong></td>
<td align="center">$</td>
<td align="center"><strong>52</strong></td>
<td align="center">4</td>
<td align="center"><strong>68</strong></td>
<td align="center">D</td>
<td align="center"><strong>84</strong></td>
<td align="center">T</td>
<td align="center"><strong>100</strong></td>
<td align="center">d</td>
<td align="center"><strong>116</strong></td>
<td align="center">t</td>
</tr>
<tr>
<td align="center"><strong>37</strong></td>
<td align="center">%</td>
<td align="center"><strong>53</strong></td>
<td align="center">5</td>
<td align="center"><strong>69</strong></td>
<td align="center">E</td>
<td align="center"><strong>85</strong></td>
<td align="center">U</td>
<td align="center"><strong>101</strong></td>
<td align="center">e</td>
<td align="center"><strong>117</strong></td>
<td align="center">u</td>
</tr>
<tr>
<td align="center"><strong>38</strong></td>
<td align="center">&amp;</td>
<td align="center"><strong>54</strong></td>
<td align="center">6</td>
<td align="center"><strong>70</strong></td>
<td align="center">F</td>
<td align="center"><strong>86</strong></td>
<td align="center">V</td>
<td align="center"><strong>102</strong></td>
<td align="center">f</td>
<td align="center"><strong>118</strong></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center"><strong>39</strong></td>
<td align="center">‘</td>
<td align="center"><strong>55</strong></td>
<td align="center">7</td>
<td align="center"><strong>71</strong></td>
<td align="center">G</td>
<td align="center"><strong>87</strong></td>
<td align="center">W</td>
<td align="center"><strong>103</strong></td>
<td align="center">g</td>
<td align="center"><strong>119</strong></td>
<td align="center">w</td>
</tr>
<tr>
<td align="center"><strong>40</strong></td>
<td align="center">(</td>
<td align="center"><strong>56</strong></td>
<td align="center">8</td>
<td align="center"><strong>72</strong></td>
<td align="center">H</td>
<td align="center"><strong>88</strong></td>
<td align="center">X</td>
<td align="center"><strong>104</strong></td>
<td align="center">h</td>
<td align="center"><strong>120</strong></td>
<td align="center">x</td>
</tr>
<tr>
<td align="center"><strong>41</strong></td>
<td align="center">)</td>
<td align="center"><strong>57</strong></td>
<td align="center">9</td>
<td align="center"><strong>73</strong></td>
<td align="center">I</td>
<td align="center"><strong>89</strong></td>
<td align="center">Y</td>
<td align="center"><strong>105</strong></td>
<td align="center">i</td>
<td align="center"><strong>121</strong></td>
<td align="center">y</td>
</tr>
<tr>
<td align="center"><strong>42</strong></td>
<td align="center">*</td>
<td align="center"><strong>58</strong></td>
<td align="center">:</td>
<td align="center"><strong>74</strong></td>
<td align="center">J</td>
<td align="center"><strong>90</strong></td>
<td align="center">Z</td>
<td align="center"><strong>106</strong></td>
<td align="center">j</td>
<td align="center"><strong>122</strong></td>
<td align="center">z</td>
</tr>
<tr>
<td align="center"><strong>43</strong></td>
<td align="center">+</td>
<td align="center"><strong>59</strong></td>
<td align="center">;</td>
<td align="center"><strong>75</strong></td>
<td align="center">K</td>
<td align="center"><strong>91</strong></td>
<td align="center">[</td>
<td align="center"><strong>107</strong></td>
<td align="center">k</td>
<td align="center"><strong>123</strong></td>
<td align="center">{</td>
</tr>
<tr>
<td align="center"><strong>44</strong></td>
<td align="center">,</td>
<td align="center"><strong>60</strong></td>
<td align="center">&lt;</td>
<td align="center"><strong>76</strong></td>
<td align="center">L</td>
<td align="center"><strong>92</strong></td>
<td align="center">\</td>
<td align="center"><strong>108</strong></td>
<td align="center">l</td>
<td align="center"><strong>124</strong></td>
<td align="center">|</td>
</tr>
<tr>
<td align="center"><strong>45</strong></td>
<td align="center">-</td>
<td align="center"><strong>61</strong></td>
<td align="center">&#x3D;</td>
<td align="center"><strong>77</strong></td>
<td align="center">M</td>
<td align="center"><strong>93</strong></td>
<td align="center">]</td>
<td align="center"><strong>109</strong></td>
<td align="center">m</td>
<td align="center"><strong>125</strong></td>
<td align="center">}</td>
</tr>
<tr>
<td align="center"><strong>46</strong></td>
<td align="center">.</td>
<td align="center"><strong>62</strong></td>
<td align="center">&gt;</td>
<td align="center"><strong>78</strong></td>
<td align="center">N</td>
<td align="center"><strong>94</strong></td>
<td align="center">^</td>
<td align="center"><strong>110</strong></td>
<td align="center">n</td>
<td align="center"><strong>126</strong></td>
<td align="center">~</td>
</tr>
<tr>
<td align="center"><strong>47</strong></td>
<td align="center">&#x2F;</td>
<td align="center"><strong>63</strong></td>
<td align="center">?</td>
<td align="center"><strong>79</strong></td>
<td align="center">O</td>
<td align="center"><strong>95</strong></td>
<td align="center">_</td>
<td align="center"><strong>111</strong></td>
<td align="center">o</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<hr>
<h2 id="数组传参"><a href="#数组传参" class="headerlink" title="数组传参"></a>数组传参</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">char</span> s[<span class="number">10</span>])</span>; <span class="comment">// f(char *s)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">10</span>] = <span class="string">&quot;LeeHero&quot;</span>;</span><br><span class="line">    f(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">char</span> s[][<span class="number">10</span>])</span>; <span class="comment">// f(char (*s)[10])</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">5</span>][<span class="number">10</span>] = &#123;<span class="string">&quot;Lee&quot;</span>,<span class="string">&quot;Hero&quot;</span>&#125;;</span><br><span class="line">    f(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><h3 id="GCD-x2F-LCM"><a href="#GCD-x2F-LCM" class="headerlink" title="GCD&#x2F;LCM"></a>GCD&#x2F;LCM</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> b&gt;<span class="number">0</span>?gcd(b,a%b):a; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a/gcd(a,b)*b; &#125;</span><br></pre></td></tr></table></figure>



<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="一般模板"><a href="#一般模板" class="headerlink" title="一般模板"></a>一般模板</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> x1 = *(<span class="type">int</span> *)a;</span><br><span class="line">    <span class="type">int</span> x2 = *(<span class="type">int</span> *)b;</span><br><span class="line">    <span class="keyword">return</span> x1-x2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">90</span>, <span class="number">80</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), i;</span><br><span class="line">    qsort(arr, n, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> usr[<span class="number">20</span>]; <span class="type">char</span> dom[<span class="number">20</span>];</span><br><span class="line">&#125; EMAIL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">	EMAIL *A = (EMAIL *)a;</span><br><span class="line">	EMAIL *B = (EMAIL *)b;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(A -&gt; dom, B -&gt; dom) == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">strcmp</span>(B -&gt; usr, A -&gt; usr);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">strcmp</span>(A -&gt; dom, B -&gt; dom);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	EMAIL *data = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    EMAIL *data = (EMAIL *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EMAIL)*(T+<span class="number">10</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">		<span class="type">char</span> ads[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;ads);</span><br><span class="line">		<span class="built_in">strcpy</span>((data+i) -&gt; usr, GetUsr(ads));</span><br><span class="line">		<span class="built_in">strcpy</span>((data+i) -&gt; dom, GetDom(ads));</span><br><span class="line">	&#125;</span><br><span class="line">	qsort(data, T, <span class="keyword">sizeof</span>(EMAIL), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s@%s\n&quot;</span>, data[i].usr, data[i].dom);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维定长数组排序"><a href="#二维定长数组排序" class="headerlink" title="二维定长数组排序"></a>二维定长数组排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">	<span class="type">char</span> *n1 = (<span class="type">char</span> *)a;</span><br><span class="line">    <span class="type">char</span> *n2 = (<span class="type">char</span> *)b;</span><br><span class="line">	<span class="keyword">return</span> myStrCmp(n1, n2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> c; <span class="type">int</span> i = <span class="number">0</span>; <span class="type">char</span> words[<span class="number">120</span>][<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, words[i++]);</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, words[i++]); &#125;</span><br><span class="line">    qsort(words, i, <span class="keyword">sizeof</span>(words[<span class="number">0</span>]), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, words[j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维动态数组排序"><a href="#二维动态数组排序" class="headerlink" title="二维动态数组排序"></a>二维动态数组排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">	<span class="type">int</span> *n1 = *((<span class="type">int</span> **)a);</span><br><span class="line">	<span class="type">int</span> *n2 = *((<span class="type">int</span> **)b);</span><br><span class="line">	<span class="keyword">return</span> *(n1+<span class="number">1</span>) - *(n2+<span class="number">1</span>); <span class="comment">//cmp car[x][1] &amp; car[y][1]</span></span><br><span class="line">&#125;                             <span class="comment">//belike ((int *)a)[1]-((int *)b)[1]</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n, t; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;t);</span><br><span class="line">	<span class="type">int</span> **car = (<span class="type">int</span> **)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">3</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">		*(car+i) = p;</span><br><span class="line">	&#125;</span><br><span class="line">    qsort(car, n, <span class="keyword">sizeof</span>(car[<span class="number">0</span>]), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p1 = *((<span class="type">char</span> **)a);</span><br><span class="line">    <span class="type">char</span> *p2 = *((<span class="type">char</span> **)b);</span><br><span class="line">    <span class="comment">//通过 *(p1+i) *(p2+i) 操作就可以解析到[一级指针所指字符串]的每个字符</span></span><br><span class="line">    <span class="comment">//从而做进一步的比较处理</span></span><br><span class="line">    <span class="comment">/* 后续省略 */</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> N; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N); <span class="type">char</span> **email;</span><br><span class="line">    email = (<span class="type">char</span> **)<span class="built_in">malloc</span>(N * <span class="keyword">sizeof</span>(<span class="type">char</span>*))； <span class="comment">//char *email[N]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        LEN = <span class="built_in">strlen</span>(s);</span><br><span class="line">        p = (<span class="type">char</span> *)<span class="built_in">malloc</span>((LEN+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(p, s);</span><br><span class="line">        *(email + i) = p;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(email, N, <span class="keyword">sizeof</span>(email[<span class="number">0</span>]), cmp); <span class="comment">// &lt;- QSORT</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*(email+i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="大整数"><a href="#大整数" class="headerlink" title="大整数"></a>大整数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> cnt, v[<span class="number">1000</span>];	<span class="comment">//个位在前存储</span></span><br><span class="line">&#125; BIGINT;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">int2BIG</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="comment">//int转BIGINT</span></span><br><span class="line">	BIGINT r = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		r.v[r.cnt++] = x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">char2BIG</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	R.cnt = len;</span><br><span class="line">	<span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		R.v[len - <span class="number">1</span> - i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBIG</span><span class="params">(BIGINT a)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (a.cnt == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> len = a.cnt, i;</span><br><span class="line">	<span class="keyword">while</span> (a.v[len - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">		len--;</span><br><span class="line">	<span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a.v[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">mul</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;	<span class="comment">//两个大整数相乘</span></span><br><span class="line">	<span class="keyword">if</span> (S.cnt == <span class="number">0</span> || T.cnt == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> int2BIG(<span class="number">0</span>);</span><br><span class="line">	BIGINT R = &#123;S.cnt + T.cnt, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> t, k, j;</span><br><span class="line">		<span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S.cnt; j++) &#123;</span><br><span class="line">			t = S.v[j] * T.v[i] + carry + R.v[i + j];</span><br><span class="line">			R.v[i + j] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		k = i + j;</span><br><span class="line">		<span class="keyword">while</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			t = carry + R.v[k];</span><br><span class="line">			R.v[k] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (R.v[S.cnt + T.cnt - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">		R.cnt--; <span class="comment">//最高位0不统计在一个大整数的位数中</span></span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">add</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;	<span class="comment">//两个大整数相加</span></span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> i, carry = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S.cnt &amp;&amp; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> temp = (S.v[i] + T.v[i] + carry);</span><br><span class="line">		R.v[i] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; S.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = S.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; T.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = T.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (carry) &#123;</span><br><span class="line">		R.v[i++] = carry % <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	R.cnt = i;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;	<span class="comment">//两个大整数的比较</span></span><br><span class="line">	<span class="type">int</span> n = (S.cnt &gt; T.cnt) ? S.cnt : T.cnt;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (*(S.v + i) &gt; *(T.v + i))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*(S.v + i) &lt; * (T.v + i))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SUB</span><span class="params">(BIGINT *S, BIGINT *T, BIGINT *result)</span> &#123; <span class="comment">//大数减小数</span></span><br><span class="line">	<span class="type">int</span> n = (S-&gt;cnt &gt; T-&gt;cnt) ? S-&gt;cnt : T-&gt;cnt;</span><br><span class="line">	result-&gt;cnt = n;</span><br><span class="line">	<span class="type">int</span> carry = <span class="number">0</span>, i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((*(S-&gt;v + i) + carry) &lt; (*(T-&gt;v + i))) &#123;</span><br><span class="line">			*(result-&gt;v + i) = <span class="number">10</span> + *(S-&gt;v + i) + carry - *(T-&gt;v + i);</span><br><span class="line">			carry = <span class="number">-1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			*(result-&gt;v + i) = *(S-&gt;v + i) + carry - *(T-&gt;v + i);</span><br><span class="line">			carry = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; !result-&gt;v[i]; i--)</span><br><span class="line">		result-&gt;cnt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">BIGSUB</span><span class="params">(BIGINT S, BIGINT T, <span class="type">int</span> *sign)</span> &#123;</span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	*sign = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (cmp(S, T) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		*sign = <span class="number">1</span>;</span><br><span class="line">		SUB(&amp;S, &amp;T, &amp;R);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		*sign = <span class="number">-1</span>;</span><br><span class="line">		SUB(&amp;T, &amp;S, &amp;R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> s1[<span class="number">600</span>], s2[<span class="number">600</span>];</span><br><span class="line">	BIGINT a = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;, b = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;, c = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>, s1, s2) != EOF) &#123;</span><br><span class="line">		a = char2BIG(s1);</span><br><span class="line">		b = char2BIG(s2);</span><br><span class="line">		c = BIGSUB(a, b, &amp;sign);</span><br><span class="line">		<span class="keyword">if</span> (sign == <span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		printBIG(c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> mod[] = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">A2dec</span><span class="params">(<span class="type">char</span> *sol, <span class="type">int</span> A)</span> &#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(sol);</span><br><span class="line">	<span class="type">int</span> weight = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sol[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; sol[i] &lt;= <span class="string">&#x27;z&#x27;</span>) sol[i] -= <span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = len<span class="number">-1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">		<span class="type">int</span> j;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(mod); j++) <span class="keyword">if</span> (mod[j] == sol[i]) <span class="keyword">break</span>;</span><br><span class="line">		ans += j*weight;</span><br><span class="line">		weight *= A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec2B</span><span class="params">(<span class="type">int</span> dec,<span class="type">int</span> B,<span class="type">char</span> *ans)</span> &#123;</span><br><span class="line">	<span class="type">char</span> temp[<span class="number">50</span>]; <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (dec == <span class="number">0</span>) temp[i++] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">while</span> (dec) &#123;</span><br><span class="line">		temp[i++] = mod[dec%B];</span><br><span class="line">		dec /= B;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = i<span class="number">-1</span>; j &gt; <span class="number">-1</span>; j--) &#123;</span><br><span class="line">		ans[k++] = temp[j];</span><br><span class="line">	&#125;</span><br><span class="line">	ans[k] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> A, B; <span class="comment">// A为起始，B为目标</span></span><br><span class="line">	<span class="type">char</span> sol[<span class="number">50</span>]; <span class="comment">// 转换数据</span></span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %s %d&quot;</span>, &amp;A, &amp;sol, &amp;B); </span><br><span class="line">	<span class="type">int</span> dec;</span><br><span class="line">	dec = A2dec(sol,A);</span><br><span class="line">	<span class="type">char</span> ans[<span class="number">50</span>];</span><br><span class="line">	dec2B(dec,B,ans);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="台阶走法"><a href="#台阶走法" class="headerlink" title="台阶走法"></a>台阶走法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> cnt, v[SIZE];</span><br><span class="line">&#125; BIGINT;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBIG</span><span class="params">(BIGINT b)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.cnt; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b.v[b.cnt - <span class="number">1</span> - i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">int2BIG</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">	BIGINT r = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">//对0特判，但是没做0的add和mul </span></span><br><span class="line">	<span class="keyword">while</span> (x) &#123;</span><br><span class="line">		r.v[r.cnt++] = x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="number">0</span>) r.cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">string2BIG</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">	BIGINT r = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	r.cnt = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r.cnt; i++)</span><br><span class="line">		r.v[r.cnt - <span class="number">1</span> - i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">BIGINT <span class="title function_">mul</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (S.cnt == <span class="number">0</span> || T.cnt == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> int2BIG(<span class="number">0</span>);</span><br><span class="line">	BIGINT R = &#123;S.cnt + T.cnt, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> t, k, j;</span><br><span class="line">		<span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S.cnt; j++) &#123;</span><br><span class="line">			t = S.v[j] * T.v[i] + carry + R.v[i + j];</span><br><span class="line">			R.v[i + j] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		k = i + j;</span><br><span class="line">		<span class="keyword">while</span> (carry) &#123;</span><br><span class="line">			t = carry + R.v[k];</span><br><span class="line">			R.v[k] = t % <span class="number">10</span>;</span><br><span class="line">			carry = t / <span class="number">10</span>;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (R.v[S.cnt + T.cnt - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">		R.cnt--;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGINT <span class="title function_">add</span><span class="params">(BIGINT S, BIGINT T)</span> &#123;</span><br><span class="line">	BIGINT R = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="type">int</span> i, carry = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S.cnt &amp;&amp; i &lt; T.cnt; i++) &#123;</span><br><span class="line">		<span class="type">int</span> temp = (S.v[i] + T.v[i] + carry);</span><br><span class="line">		R.v[i] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; S.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = S.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; T.cnt) &#123;</span><br><span class="line">		<span class="type">int</span> temp = T.v[i] + carry;</span><br><span class="line">		R.v[i++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (carry)</span><br><span class="line">		R.v[i++] = carry % <span class="number">10</span>;</span><br><span class="line">	R.cnt = i;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ull hash[101] = &#123;0&#125;;</span></span><br><span class="line">BIGINT hash[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt;= <span class="number">1</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 1;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 2;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 4;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">4</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span>)</span><br><span class="line">			<span class="comment">//hash[i] = 8;</span></span><br><span class="line">			hash[i] = int2BIG(<span class="number">8</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//hash[i] = hash[i - 1] + hash[i - 2] + hash[i - 3] + hash[i - 4];</span></span><br><span class="line">			BIGINT r1 = add(hash[i - <span class="number">1</span>], hash[i - <span class="number">2</span>]);</span><br><span class="line">			BIGINT r2 = add(hash[i - <span class="number">3</span>], hash[i - <span class="number">4</span>]);</span><br><span class="line">			hash[i] = add(r1, r2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">		<span class="type">int</span> ptA, ptB; <span class="comment">//path A/B</span></span><br><span class="line">		<span class="type">int</span> stB, stS; <span class="comment">//Start Building/Step</span></span><br><span class="line">		<span class="type">int</span> edB, edS; <span class="comment">//End Building/Step</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;ptA, &amp;ptB, &amp;stB, &amp;stS, &amp;edB, &amp;edS);</span><br><span class="line">		<span class="comment">//ull ans;</span></span><br><span class="line">		BIGINT ans = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">		<span class="keyword">if</span> (stB == edB) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ptA &lt; stS || ptB &gt; edS) &#123;</span><br><span class="line">				ans = hash[edS - stS];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//ans = hash[edS - ptB] * hash[ptB - ptA] * hash[ptA - stS] + hash[edS - stS];</span></span><br><span class="line">				BIGINT r1 = mul(hash[edS - ptB], hash[ptB - ptA]);</span><br><span class="line">				BIGINT r2 = mul(r1, hash[ptA - stS]);</span><br><span class="line">				ans = add(r2, hash[edS - stS]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (stB != edB) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ptA &lt; stS &amp;&amp; ptB &gt; edS || ptA &gt; edS || ptB &lt; stS) &#123; </span><br><span class="line">			<span class="comment">/*B走廊在起点下方；A走廊在终点上方；AB包夹起点和终点*/</span> </span><br><span class="line">				<span class="comment">//ans = 0;</span></span><br><span class="line">				ans = int2BIG(<span class="number">0</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ptA &lt; stS) &#123;</span><br><span class="line">				<span class="comment">//ans = hash[ptB - stS] * hash[edS - ptB];</span></span><br><span class="line">				ans = mul(hash[ptB - stS], hash[edS - ptB]);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ptB &gt; edS) &#123;</span><br><span class="line">				<span class="comment">//ans = hash[ptA - stS] * hash[edS - ptA];</span></span><br><span class="line">				ans = mul(hash[ptA - stS], hash[edS - ptA]);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//ans = hash[ptB - stS] * hash[edS - ptB] + hash[ptA - stS] * hash[edS - ptA];</span></span><br><span class="line">				BIGINT r1 = mul(hash[ptB - stS], hash[edS - ptB]);</span><br><span class="line">				BIGINT r2 = mul(hash[ptA - stS], hash[edS - ptA]);</span><br><span class="line">				ans = add(r1, r2);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//printf(&quot;case #%d:\n%llu\n&quot;, i, ans);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;case #%d:\n&quot;</span>, i); printBIG(ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="皇后问题"><a href="#皇后问题" class="headerlink" title="皇后问题"></a>皇后问题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Danger</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="comment">/*Q的可攻击路径标记为D，遇到另外的Q则停止，并且把Q变为O*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>; k &lt; n; k++) &#123; <span class="comment">// 下 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][j] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][j] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i<span class="number">-1</span>; k &gt; <span class="number">-1</span>; k--) &#123; <span class="comment">// 上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][j] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][j] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][j] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = j+<span class="number">1</span>; k &lt; n; k++) &#123; <span class="comment">// 右 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[i][k] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[i][k] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = j<span class="number">-1</span>; k &gt; <span class="number">-1</span>; k--) &#123; <span class="comment">// 左 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[i][k] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[i][k] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[i][k] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>, l = j+<span class="number">1</span>; k &lt; n &amp;&amp; l &lt; n; k++, l++) &#123; <span class="comment">// 右下 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i<span class="number">-1</span>, l = j+<span class="number">1</span>; k &gt; <span class="number">-1</span> &amp;&amp; l &lt; n; k--, l++) &#123; <span class="comment">// 右上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i<span class="number">-1</span>, l = j<span class="number">-1</span>; k &gt; <span class="number">-1</span> &amp;&amp; l &gt; <span class="number">-1</span>; k--, l--) &#123; <span class="comment">// 左上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>, l = j<span class="number">-1</span>; k &lt; n &amp;&amp; l &gt; <span class="number">-1</span>; k++, l--) &#123; <span class="comment">// 左上 </span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">map</span>[k][l] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[k][l] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="built_in">map</span>[k][l] = <span class="string">&#x27;O&#x27;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Safe</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span>;</span><br><span class="line">	<span class="comment">/*q的移动路径上若为E，标记为S，遇到Q变为S后停止，遇到O直接停止*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">SafeCnter</span><span class="params">(<span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="comment">/*统计地图中S的数目*/</span></span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">&#x27;S&#x27;</span>) cnt++; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Show</span><span class="params">(<span class="type">char</span> <span class="built_in">map</span>[][<span class="number">200</span>], <span class="type">int</span> n)</span>；</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n; <span class="type">char</span> c;</span><br><span class="line">	<span class="type">char</span> <span class="built_in">map</span>[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line">	<span class="type">int</span> Qpos[<span class="number">20000</span>][<span class="number">2</span>]; <span class="type">int</span> Qind = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> qpos[<span class="number">2</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	c = getchar();</span><br><span class="line">	<span class="comment">/*读取地图*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">				Qpos[Qind][<span class="number">0</span>] = i; Qpos[Qind][<span class="number">1</span>] = j;</span><br><span class="line">				Qind++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">&#x27;q&#x27;</span>) &#123;</span><br><span class="line">				qpos[<span class="number">0</span>] = i; qpos[<span class="number">1</span>] = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		c = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;Qind:%d\n&quot;, Qind);</span></span><br><span class="line">	<span class="comment">/*标记危险格子*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Qind; i++) &#123;</span><br><span class="line">		<span class="type">int</span> Qi = Qpos[i][<span class="number">0</span>], Qj = Qpos[i][<span class="number">1</span>];</span><br><span class="line">		<span class="comment">//printf(&quot;Qi:%d Qj:%d\n&quot;,Qi, Qj);</span></span><br><span class="line">		Danger(Qi, Qj, <span class="built_in">map</span>, n);</span><br><span class="line">	&#125;</span><br><span class="line">	Safe(qpos[<span class="number">0</span>], qpos[<span class="number">1</span>], <span class="built_in">map</span>, n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SafeCnter(<span class="built_in">map</span>, n)); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
