[{"title":"blog-test","url":"/2023/07/06/blog-test/","content":"编思小抄数据范围\n\n\n数据类型\n范围（2^x^）\n最大范围（10^x^）\n格式化控制符\n\n\n\nunsigned int\n[0,2^32^-1]\n10^9^\n%u\n\n\nint\n[-2^31^,2^31^-1]\n10^9^\n%d\n\n\nlong long\n[-2^63^,2^63^-1]\n10^18^\n%lld\n\n\nunsigned long long\n[0,2^64^-1]\n10^19^\n%llu\n\n\n\nASCII码\n\n\nDec\nChar\nDec\nChar\nDec\nChar\nDec\nChar\nDec\nChar\nDec\nChar\n\n\n\n32\n\n48\n0\n64\n@\n80\nP\n96\n&#96;\n112\np\n\n\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n34\n“\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n38\n&amp;\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n39\n‘\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n|\n\n\n45\n-\n61\n&#x3D;\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n47\n&#x2F;\n63\n?\n79\nO\n95\n_\n111\no\n\n\n\n\n\n数组传参void f(char s[10]); // f(char *s)int main() &#123;    char s[10] = &quot;LeeHero&quot;;    f(s);    return 0;&#125;\n\nvoid f(char s[][10]); // f(char (*s)[10])int main() &#123;    char s[5][10] = &#123;&quot;Lee&quot;,&quot;Hero&quot;&#125;;    f(s);    return 0;&#125;\n\n\n代码模板GCD&#x2F;LCMint gcd(int a, int b) &#123; return b&gt;0?gcd(b,a%b):a; &#125;int lcm(int a, int b) &#123; return a/gcd(a,b)*b; &#125;\n\n\n\n排序一般模板int cmp(const void *a, const void *b) &#123;    int x1 = *(int *)a;    int x2 = *(int *)b;    return x1-x2;&#125;int main() &#123;    int arr[] = &#123;10, 5, 15, 12, 90, 80&#125;;    int n = sizeof(arr) / sizeof(arr[0]), i;    qsort(arr, n, sizeof(int), cmp); // &lt;- QSORT    for (i = 0; i &lt; n; i++)        printf(&quot;%d &quot;, arr[i]);    printf(&quot;\\n&quot;);    return 0;&#125;\n\n结构体排序typedef struct &#123;\tchar usr[20]; char dom[20];&#125; EMAIL;int cmp(const void *a, const void *b) &#123;\tEMAIL *A = (EMAIL *)a;\tEMAIL *B = (EMAIL *)b;\tif (strcmp(A -&gt; dom, B -&gt; dom) == 0) &#123;\t\treturn strcmp(B -&gt; usr, A -&gt; usr);\t&#125; else &#123;\t\treturn strcmp(A -&gt; dom, B -&gt; dom);\t&#125;&#125;int main() &#123;\tEMAIL *data = 0;\tint T; scanf(&quot;%d&quot;, &amp;T);    EMAIL *data = (EMAIL *)malloc(sizeof(EMAIL)*(T+10));\tfor (int i = 0; i &lt; T; i++) &#123;\t\tchar ads[50] = &#123;0&#125;;\t\tscanf(&quot;%s&quot;, &amp;ads);\t\tstrcpy((data+i) -&gt; usr, GetUsr(ads));\t\tstrcpy((data+i) -&gt; dom, GetDom(ads));\t&#125;\tqsort(data, T, sizeof(EMAIL), cmp); // &lt;- QSORT\tfor (int i = 0; i &lt; T; i++)\t\tprintf(&quot;%s@%s\\n&quot;, data[i].usr, data[i].dom);\treturn 0;&#125;\n\n二维定长数组排序int cmp(const void *a, const void *b) &#123;\tchar *n1 = (char *)a;    char *n2 = (char *)b;\treturn myStrCmp(n1, n2);&#125;int main() &#123;    char c; int i = 0; char words[120][100] = &#123;0&#125;;    scanf(&quot;%s&quot;, words[i++]);    while ((c = getchar()) != &#x27;\\n&#x27;) &#123; scanf(&quot;%s&quot;, words[i++]); &#125;    qsort(words, i, sizeof(words[0]), cmp); // &lt;- QSORT    for (int j = 0; j &lt; i; j++) printf(&quot;%s &quot;, words[j]);    printf(&quot;\\n&quot;);\treturn 0; &#125;\n\n二维动态数组排序int cmp(const void *a, const void *b) &#123;\tint *n1 = *((int **)a);\tint *n2 = *((int **)b);\treturn *(n1+1) - *(n2+1); //cmp car[x][1] &amp; car[y][1]&#125;                             //belike ((int *)a)[1]-((int *)b)[1]int main() &#123;\tint n, t; scanf(&quot;%d %d&quot;,&amp;n,&amp;t);\tint **car = (int **)malloc(n*sizeof(int*));\tfor (int i = 0; i &lt; n; i++) &#123;\t\tint *p = (int *)malloc(3*sizeof(int));\t\t*(car+i) = p;\t&#125;    qsort(car, n, sizeof(car[0]), cmp); // &lt;- QSORT    return 0;&#125;\n\n\n\nint cmp(const void *a, const void *b) &#123;    char *p1 = *((char **)a);    char *p2 = *((char **)b);    //通过 *(p1+i) *(p2+i) 操作就可以解析到[一级指针所指字符串]的每个字符    //从而做进一步的比较处理    /* 后续省略 */    return ret;&#125;int main() &#123;\tint N; scanf(&quot;%d&quot;, &amp;N); char **email;    email = (char **)malloc(N * sizeof(char*))； //char *email[N]    for (int i = 0; i &lt; N; i++) &#123;        scanf(&quot;%s&quot;, s);        LEN = strlen(s);        p = (char *)malloc((LEN+1) * sizeof(char));        strcpy(p, s);        *(email + i) = p;    &#125;    qsort(email, N, sizeof(email[0]), cmp); // &lt;- QSORT    for (int i = 0; i &lt; n; i++) printf(&quot;%s\\n&quot;,*(email+i));    return 0;&#125;\n\n\n\n大整数#include &lt;stdio.h&gt;#include &lt;string.h&gt;typedef struct &#123;\tint cnt, v[1000];\t//个位在前存储&#125; BIGINT;BIGINT int2BIG(int x) &#123; //int转BIGINT\tBIGINT r = &#123;0, &#123;0&#125;&#125;;\twhile (x &gt; 0) &#123;\t\tr.v[r.cnt++] = x % 10;\t\tx /= 10;\t&#125;\treturn r;&#125;BIGINT char2BIG(char *s) &#123;\tBIGINT R = &#123;0, &#123;0&#125;&#125;;\tint len = strlen(s);\tint i;\tR.cnt = len;\tfor (i = len - 1; i &gt;= 0; i--) &#123;\t\tR.v[len - 1 - i] = s[i] - &#x27;0&#x27;;\t&#125;\treturn R;&#125;void printBIG(BIGINT a) &#123;\tif (a.cnt == 0) &#123;\t\tprintf(&quot;0\\n&quot;);\t\treturn;\t&#125;\tint len = a.cnt, i;\twhile (a.v[len - 1] == 0)\t\tlen--;\tfor (i = len - 1; i &gt;= 0; i--)\t\tprintf(&quot;%d&quot;, a.v[i]);\tprintf(&quot;\\n&quot;);&#125;BIGINT mul(BIGINT S, BIGINT T) &#123;\t//两个大整数相乘\tif (S.cnt == 0 || T.cnt == 0)\t\treturn int2BIG(0);\tBIGINT R = &#123;S.cnt + T.cnt, &#123;0&#125;&#125;;\tfor (int i = 0; i &lt; T.cnt; i++) &#123;\t\tint t, k, j;\t\tint carry = 0;\t\tfor (j = 0; j &lt; S.cnt; j++) &#123;\t\t\tt = S.v[j] * T.v[i] + carry + R.v[i + j];\t\t\tR.v[i + j] = t % 10;\t\t\tcarry = t / 10;\t\t&#125;\t\tk = i + j;\t\twhile (carry &gt; 0) &#123;\t\t\tt = carry + R.v[k];\t\t\tR.v[k] = t % 10;\t\t\tcarry = t / 10;\t\t\tk++;\t\t&#125;\t&#125;\tif (R.v[S.cnt + T.cnt - 1] == 0)\t\tR.cnt--; //最高位0不统计在一个大整数的位数中\treturn R;&#125;BIGINT add(BIGINT S, BIGINT T) &#123;\t//两个大整数相加\tBIGINT R = &#123;0, &#123;0&#125;&#125;;\tint i, carry = 0;\tfor (i = 0; i &lt; S.cnt &amp;&amp; i &lt; T.cnt; i++) &#123;\t\tint temp = (S.v[i] + T.v[i] + carry);\t\tR.v[i] = temp % 10;\t\tcarry = temp / 10;\t&#125;\twhile (i &lt; S.cnt) &#123;\t\tint temp = S.v[i] + carry;\t\tR.v[i++] = temp % 10;\t\tcarry = temp / 10;\t&#125;\twhile (i &lt; T.cnt) &#123;\t\tint temp = T.v[i] + carry;\t\tR.v[i++] = temp % 10;\t\tcarry = temp / 10;\t&#125;\tif (carry) &#123;\t\tR.v[i++] = carry % 10;\t&#125;\tR.cnt = i;\treturn R;&#125;int cmp(BIGINT S, BIGINT T) &#123;\t//两个大整数的比较\tint n = (S.cnt &gt; T.cnt) ? S.cnt : T.cnt;\tfor (int i = n - 1; i &gt;= 0; i--)\t\tif (*(S.v + i) &gt; *(T.v + i))\t\t\treturn 1;\t\telse if (*(S.v + i) &lt; * (T.v + i))\t\t\treturn -1;\treturn 0;&#125;void SUB(BIGINT *S, BIGINT *T, BIGINT *result) &#123; //大数减小数\tint n = (S-&gt;cnt &gt; T-&gt;cnt) ? S-&gt;cnt : T-&gt;cnt;\tresult-&gt;cnt = n;\tint carry = 0, i;\tfor (i = 0; i &lt; n; i++) &#123;\t\tif ((*(S-&gt;v + i) + carry) &lt; (*(T-&gt;v + i))) &#123;\t\t\t*(result-&gt;v + i) = 10 + *(S-&gt;v + i) + carry - *(T-&gt;v + i);\t\t\tcarry = -1;\t\t&#125; else &#123;\t\t\t*(result-&gt;v + i) = *(S-&gt;v + i) + carry - *(T-&gt;v + i);\t\t\tcarry = 0;\t\t&#125;\t&#125;\tfor (int i = n - 1; i &gt;= 0 &amp;&amp; !result-&gt;v[i]; i--)\t\tresult-&gt;cnt--;&#125;BIGINT BIGSUB(BIGINT S, BIGINT T, int *sign) &#123;\tBIGINT R = &#123;0, &#123;0&#125;&#125;;\t*sign = 1;\tif (cmp(S, T) &gt;= 0) &#123;\t\t*sign = 1;\t\tSUB(&amp;S, &amp;T, &amp;R);\t&#125; else &#123;\t\t*sign = -1;\t\tSUB(&amp;T, &amp;S, &amp;R);\t&#125;\treturn R;&#125;int main() &#123;\tchar s1[600], s2[600];\tBIGINT a = &#123;0, &#123;0&#125;&#125;, b = &#123;0, &#123;0&#125;&#125;, c = &#123;0, &#123;0&#125;&#125;;\tint sign = 1;\twhile (scanf(&quot;%s %s&quot;, s1, s2) != EOF) &#123;\t\ta = char2BIG(s1);\t\tb = char2BIG(s2);\t\tc = BIGSUB(a, b, &amp;sign);\t\tif (sign == -1)\t\t\tprintf(&quot;-&quot;);\t\tprintBIG(c);\t&#125;\treturn 0;&#125;\n\n\n代码示例进制转换#include &lt;stdio.h&gt;#include &lt;string.h&gt;const char mod[] = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;int A2dec(char *sol, int A) &#123;\tint len = strlen(sol);\tint weight = 1;\tint ans = 0;\tfor (int i = 0; i &lt; len; i++) &#123;\t\tif (sol[i] &gt;= &#x27;a&#x27; &amp;&amp; sol[i] &lt;= &#x27;z&#x27;) sol[i] -= &#x27;a&#x27;-&#x27;A&#x27;;\t&#125;\tfor (int i = len-1; i &gt; -1; i--) &#123;\t\tint j;\t\tfor (j = 0; j &lt; strlen(mod); j++) if (mod[j] == sol[i]) break;\t\tans += j*weight;\t\tweight *= A;\t&#125;\treturn ans;&#125;void dec2B(int dec,int B,char *ans) &#123;\tchar temp[50]; int i = 0;\tif (dec == 0) temp[i++] = &#x27;0&#x27;;\twhile (dec) &#123;\t\ttemp[i++] = mod[dec%B];\t\tdec /= B;\t&#125;\tint k = 0;\tfor (int j = i-1; j &gt; -1; j--) &#123;\t\tans[k++] = temp[j];\t&#125;\tans[k] = &#x27;\\0&#x27;;&#125;int main() &#123;\tint A, B; // A为起始，B为目标\tchar sol[50]; // 转换数据\tscanf (&quot;%d %s %d&quot;, &amp;A, &amp;sol, &amp;B); \tint dec;\tdec = A2dec(sol,A);\tchar ans[50];\tdec2B(dec,B,ans);\tprintf(&quot;%s&quot;, ans);\treturn 0;&#125; \n\n台阶走法#include &lt;stdio.h&gt;#include &lt;string.h&gt;typedef unsigned long long int ull;#define SIZE 500typedef struct &#123;\tint cnt, v[SIZE];&#125; BIGINT;void printBIG(BIGINT b) &#123;\tfor (int i = 0; i &lt; b.cnt; i++)\t\tprintf(&quot;%d&quot;, b.v[b.cnt - 1 - i]);\tprintf(&quot;\\n&quot;);&#125;BIGINT int2BIG(int x) &#123;\tBIGINT r = &#123;0, &#123;0&#125;&#125;;\tint flag = 0; //对0特判，但是没做0的add和mul \twhile (x) &#123;\t\tr.v[r.cnt++] = x % 10;\t\tx /= 10;\t\tflag = 1;\t&#125;\tif (flag == 0) r.cnt = 1;\treturn r;&#125;BIGINT string2BIG(char *s) &#123;\tBIGINT r = &#123;0, &#123;0&#125;&#125;;\tr.cnt = strlen(s);\tfor (int i = 0; i &lt; r.cnt; i++)\t\tr.v[r.cnt - 1 - i] = s[i] - &#x27;0&#x27;;\treturn r;&#125;BIGINT mul(BIGINT S, BIGINT T) &#123;\tif (S.cnt == 0 || T.cnt == 0)\t\treturn int2BIG(0);\tBIGINT R = &#123;S.cnt + T.cnt, &#123;0&#125;&#125;;\tfor (int i = 0; i &lt; T.cnt; i++) &#123;\t\tint t, k, j;\t\tint carry = 0;\t\tfor (j = 0; j &lt; S.cnt; j++) &#123;\t\t\tt = S.v[j] * T.v[i] + carry + R.v[i + j];\t\t\tR.v[i + j] = t % 10;\t\t\tcarry = t / 10;\t\t&#125;\t\tk = i + j;\t\twhile (carry) &#123;\t\t\tt = carry + R.v[k];\t\t\tR.v[k] = t % 10;\t\t\tcarry = t / 10;\t\t\tk++;\t\t&#125;\t&#125;\tif (R.v[S.cnt + T.cnt - 1] == 0)\t\tR.cnt--;\treturn R;&#125;BIGINT add(BIGINT S, BIGINT T) &#123;\tBIGINT R = &#123;0, &#123;0&#125;&#125;;\tint i, carry = 0;\tfor (i = 0; i &lt; S.cnt &amp;&amp; i &lt; T.cnt; i++) &#123;\t\tint temp = (S.v[i] + T.v[i] + carry);\t\tR.v[i] = temp % 10;\t\tcarry = temp / 10;\t&#125;\twhile (i &lt; S.cnt) &#123;\t\tint temp = S.v[i] + carry;\t\tR.v[i++] = temp % 10;\t\tcarry = temp / 10;\t&#125;\twhile (i &lt; T.cnt) &#123;\t\tint temp = T.v[i] + carry;\t\tR.v[i++] = temp % 10;\t\tcarry = temp / 10;\t&#125;\tif (carry)\t\tR.v[i++] = carry % 10;\tR.cnt = i;\treturn R;&#125;//ull hash[101] = &#123;0&#125;;BIGINT hash[101];int main() &#123;\tfor (int i = 0; i &lt; 101; i++) &#123;\t\tif (i &lt;= 1)\t\t\t//hash[i] = 1;\t\t\thash[i] = int2BIG(1);\t\telse if (i == 2)\t\t\t//hash[i] = 2;\t\t\thash[i] = int2BIG(2);\t\telse if (i == 3)\t\t\t//hash[i] = 4;\t\t\thash[i] = int2BIG(4);\t\telse if (i == 4)\t\t\t//hash[i] = 8;\t\t\thash[i] = int2BIG(8);\t\telse &#123;\t\t\t//hash[i] = hash[i - 1] + hash[i - 2] + hash[i - 3] + hash[i - 4];\t\t\tBIGINT r1 = add(hash[i - 1], hash[i - 2]);\t\t\tBIGINT r2 = add(hash[i - 3], hash[i - 4]);\t\t\thash[i] = add(r1, r2);\t\t&#125;\t&#125;\tint T;\tscanf(&quot;%d&quot;, &amp;T);\tfor (int i = 0; i &lt; T; i++) &#123;\t\tint ptA, ptB; //path A/B\t\tint stB, stS; //Start Building/Step\t\tint edB, edS; //End Building/Step\t\tscanf(&quot;%d %d %d %d %d %d&quot;, &amp;ptA, &amp;ptB, &amp;stB, &amp;stS, &amp;edB, &amp;edS);\t\t//ull ans;\t\tBIGINT ans = &#123;0, &#123;0&#125;&#125;;\t\tif (stB == edB) &#123;\t\t\tif (ptA &lt; stS || ptB &gt; edS) &#123;\t\t\t\tans = hash[edS - stS];\t\t\t&#125; else &#123;\t\t\t\t//ans = hash[edS - ptB] * hash[ptB - ptA] * hash[ptA - stS] + hash[edS - stS];\t\t\t\tBIGINT r1 = mul(hash[edS - ptB], hash[ptB - ptA]);\t\t\t\tBIGINT r2 = mul(r1, hash[ptA - stS]);\t\t\t\tans = add(r2, hash[edS - stS]);\t\t\t&#125;\t\t&#125; else if (stB != edB) &#123;\t\t\tif (ptA &lt; stS &amp;&amp; ptB &gt; edS || ptA &gt; edS || ptB &lt; stS) &#123; \t\t\t/*B走廊在起点下方；A走廊在终点上方；AB包夹起点和终点*/ \t\t\t\t//ans = 0;\t\t\t\tans = int2BIG(0);\t\t\t&#125; else if (ptA &lt; stS) &#123;\t\t\t\t//ans = hash[ptB - stS] * hash[edS - ptB];\t\t\t\tans = mul(hash[ptB - stS], hash[edS - ptB]);\t\t\t&#125; else if (ptB &gt; edS) &#123;\t\t\t\t//ans = hash[ptA - stS] * hash[edS - ptA];\t\t\t\tans = mul(hash[ptA - stS], hash[edS - ptA]);\t\t\t&#125; else &#123;\t\t\t\t//ans = hash[ptB - stS] * hash[edS - ptB] + hash[ptA - stS] * hash[edS - ptA];\t\t\t\tBIGINT r1 = mul(hash[ptB - stS], hash[edS - ptB]);\t\t\t\tBIGINT r2 = mul(hash[ptA - stS], hash[edS - ptA]);\t\t\t\tans = add(r1, r2);\t\t\t&#125;\t\t&#125;\t\t//printf(&quot;case #%d:\\n%llu\\n&quot;, i, ans);\t\tprintf(&quot;case #%d:\\n&quot;, i); printBIG(ans);\t&#125;\treturn 0;&#125;\n\n皇后问题#include &lt;stdio.h&gt;void Danger(int i, int j, char map[][200], int n) &#123;\t/*Q的可攻击路径标记为D，遇到另外的Q则停止，并且把Q变为O*/\tfor (int k = i+1; k &lt; n; k++) &#123; // 下 \t\tif (map[k][j] == &#x27;E&#x27;) map[k][j] = &#x27;D&#x27;;\t\tif (map[k][j] == &#x27;Q&#x27;) &#123; map[k][j] = &#x27;O&#x27;; break; &#125;\t&#125;\tfor (int k = i-1; k &gt; -1; k--) &#123; // 上 \t\tif (map[k][j] == &#x27;E&#x27;) map[k][j] = &#x27;D&#x27;;\t\tif (map[k][j] == &#x27;Q&#x27;) &#123; map[k][j] = &#x27;O&#x27;; break; &#125;\t&#125;\tfor (int k = j+1; k &lt; n; k++) &#123; // 右 \t\tif (map[i][k] == &#x27;E&#x27;) map[i][k] = &#x27;D&#x27;;\t\tif (map[i][k] == &#x27;Q&#x27;) &#123; map[i][k] = &#x27;O&#x27;; break; &#125;\t&#125;\tfor (int k = j-1; k &gt; -1; k--) &#123; // 左 \t\tif (map[i][k] == &#x27;E&#x27;) map[i][k] = &#x27;D&#x27;;\t\tif (map[i][k] == &#x27;Q&#x27;) &#123; map[i][k] = &#x27;O&#x27;; break; &#125;\t&#125;\tfor (int k = i+1, l = j+1; k &lt; n &amp;&amp; l &lt; n; k++, l++) &#123; // 右下 \t\tif (map[k][l] == &#x27;E&#x27;) map[k][l] = &#x27;D&#x27;;\t\tif (map[k][l] == &#x27;Q&#x27;) &#123; map[k][l] = &#x27;O&#x27;; break; &#125;\t&#125;\tfor (int k = i-1, l = j+1; k &gt; -1 &amp;&amp; l &lt; n; k--, l++) &#123; // 右上 \t\tif (map[k][l] == &#x27;E&#x27;) map[k][l] = &#x27;D&#x27;;\t\tif (map[k][l] == &#x27;Q&#x27;) &#123; map[k][l] = &#x27;O&#x27;; break; &#125;\t&#125;\tfor (int k = i-1, l = j-1; k &gt; -1 &amp;&amp; l &gt; -1; k--, l--) &#123; // 左上 \t\tif (map[k][l] == &#x27;E&#x27;) map[k][l] = &#x27;D&#x27;;\t\tif (map[k][l] == &#x27;Q&#x27;) &#123; map[k][l] = &#x27;O&#x27;; break; &#125;\t&#125;\tfor (int k = i+1, l = j-1; k &lt; n &amp;&amp; l &gt; -1; k++, l--) &#123; // 左上 \t\tif (map[k][l] == &#x27;E&#x27;) map[k][l] = &#x27;D&#x27;;\t\tif (map[k][l] == &#x27;Q&#x27;) &#123; map[k][l] = &#x27;O&#x27;; break; &#125;\t&#125;&#125;void Safe(int i, int j, char map[][200], int n);\t/*q的移动路径上若为E，标记为S，遇到Q变为S后停止，遇到O直接停止*/int SafeCnter(char map[][200], int n) &#123;\t/*统计地图中S的数目*/\tint cnt = 0;\tfor (int i = 0; i &lt; n; i++) &#123;\t\tfor (int j = 0; j &lt; n; j++) if(map[i][j] == &#x27;S&#x27;) cnt++; \t&#125;\treturn cnt;&#125;void Show(char map[][200], int n)；int main() &#123;\tint n; char c;\tchar map[200][200];\tint Qpos[20000][2]; int Qind = 0;\tint qpos[2];\tscanf(&quot;%d&quot;, &amp;n);\tc = getchar();\t/*读取地图*/\tfor (int i = 0; i &lt; n; i++) &#123;\t\tfor (int j = 0; j &lt; n; j++) &#123;\t\t\tscanf(&quot;%c&quot;, &amp;map[i][j]);\t\t\tif (map[i][j] == &#x27;Q&#x27;) &#123;\t\t\t\tQpos[Qind][0] = i; Qpos[Qind][1] = j;\t\t\t\tQind++;\t\t\t&#125;\t\t\tif (map[i][j] == &#x27;q&#x27;) &#123;\t\t\t\tqpos[0] = i; qpos[1] = j;\t\t\t&#125;\t\t&#125;\t\tc = getchar();\t&#125;\t//printf(&quot;Qind:%d\\n&quot;, Qind);\t/*标记危险格子*/\tfor (int i = 0; i &lt; Qind; i++) &#123;\t\tint Qi = Qpos[i][0], Qj = Qpos[i][1];\t\t//printf(&quot;Qi:%d Qj:%d\\n&quot;,Qi, Qj);\t\tDanger(Qi, Qj, map, n);\t&#125;\tSafe(qpos[0], qpos[1], map, n);\tprintf(&quot;%d\\n&quot;,SafeCnter(map, n)); \treturn 0;&#125;\n"},{"title":"blog test II","url":"/2023/07/06/blog-test-II/","content":"ECNU - Linear Algebra[1.x] 知识点提纲[1.1.x] 行列式\n二阶行列式计算\n主对角线 $-$ 副对角线\n\n\n三角行列式计算\n上&#x2F;下三角：主对角线元素乘积\n行列式性质：\n某行&#x2F;列的k倍加到另一行&#x2F;列，行列式值不变\n某行&#x2F;列所有元素公因子可以提到行列式外\n交换两行&#x2F;列，行列式值变号\n\n\n\n\n行和相等行列式计算\n把后面所有列加到第一列，提公因子，使得第一列全部变成1\n行变换，化成三角行列式\n\n\n范德蒙德行列式计算\n特点：\n第一行&#x2F;列元素全为 $1$\n每一列&#x2F;行元素均为等比数列，且公比元素在第 $2$ 行&#x2F;列\n结果为公比元素作差再相乘\n\n\n\n\n爪形行列式计算\n通过提公因子，将主对角线第 $2,3,…,n$ 个元素化为 $1$\n化为三角行列式\n\n\n余子式、代数余子式\n余子式 $M_{ij}$ 无符号；代数余子式 $A_{ij}$ 有符号\n行列式 $&#x3D;$ 某行&#x2F;列元素乘以相应代数余子式后求和\neg. 求 $A_{31}+3A_{32}-2A_{33}+2A_{34}$ \n把行列式 $D$ 中 $a_{31},…,a_{34}$ 分别替换为对应系数 $1,3,-2,2$ 后再求行列式即可。\n\n\neg. 求 $M_{31}+3M_{32}-2M_{33}+2M_{34}$ \n通过 $M$ 和 $A$ 的代换，将原式化为：$A_{31}-3A_{32}+(-2A_{33})-2A_{34}$ \n再系数替换，求新的行列式\n\n\n\n\n用拆和的方法计算行列式\n当行列式某行&#x2F;列为两数之和，行列式可分解为两行列式之和（其余行&#x2F;列元素不变）\n当行列式某两行&#x2F;列元素成比例，行列式等于零\n\n\n拉普拉斯公式计算行列式\n$D&#x3D;\\begin{vmatrix} a_1&amp;a_2&amp;0&amp;0 \\ a_3&amp;a_4&amp;0&amp;0 \\ c_1&amp;c_2&amp;b_1&amp;b_2 \\ c_3&amp;c_4&amp;b_3&amp;b_4 \\end{vmatrix} &#x3D; \\begin{vmatrix}A&amp;0\\C&amp;B\\end{vmatrix}&#x3D;|A||B|&#x3D;\\begin{vmatrix} a_1&amp;a_2\\a_3&amp;a_4 \\end{vmatrix}\\begin{vmatrix} b_1&amp;b_2\\b_3&amp;b_4 \\end{vmatrix}$\n若不符合主对角线形式的拉普拉斯公式，可以通过行&#x2F;列调换使得其变成主对角线形式\n$D&#x3D;\\begin{vmatrix}0&amp;A_{m\\times m}\\B_{n\\times n}&amp;C\\end{vmatrix}&#x3D;(-1)^{m+n}|A||B|&#x3D;(-1)^{m+n}\\begin{vmatrix} a_1&amp;a_2\\a_3&amp;a_4 \\end{vmatrix}\\begin{vmatrix} b_1&amp;b_2\\b_3&amp;b_4 \\end{vmatrix}$\n\n\n\n[1.2.x] 矩阵\n矩阵的乘法\n\n[Tip]矩阵乘法不满足交换律，满足分配律\n\n\n抽象矩阵求逆矩阵\n\n[Key]根据条件出发，找出相乘为E的矩阵\n[Key]拆出来 or 长除法\n[Tip]对 $A$ 而言，根据 $AB&#x3D;E$ 找出相应的 $B$\n\n\n数字型求逆矩阵\n\n[Key]利用行变化法求逆矩阵：$(A|E)\\xrightarrow[]{行变换}(E|A^{-1})$\n[Key]二阶矩阵逆矩阵秒杀“两调一除”：$A&#x3D;\\begin{pmatrix}a&amp;b\\c&amp;d\\end{pmatrix}$ ; $A^{-1}&#x3D;\\frac{1}{\\begin{vmatrix}A\\end{vmatrix}}\\begin{pmatrix}d&amp;-b\\-c&amp;a\\end{pmatrix}$\n[Tip]方阵 $A$ 可逆 $\\Leftrightarrow$ $\\begin{vmatrix}A\\end{vmatrix}\\neq0$\n\n\n求解矩阵方程\n\n$AX&#x3D;B \\Longrightarrow X&#x3D;A^{-1}B$\n$XA&#x3D;B \\Longrightarrow X&#x3D;BA^{-1}$\n$BXA&#x3D;C \\Longrightarrow X&#x3D;B^{-1}CA^{-1}$\n前提都是 $A^{-1}、B^{-1}$ 存在\n\n\n$AA^*&#x3D;A^A&#x3D;|A|E$ ; $A^&#x3D;|A|A^{-1}$\n用来解决矩阵方程中的 $A^*$\n\n\n[Tip]行列式外系数乘进去是一行&#x2F;一列；矩阵外系数乘进去是每一个元素\n\n\n方阵的行列式\n\n$|A^{-1}|&#x3D;|A|^{-1}$ ; $|A^T|&#x3D;|A|$ ; $|kA_{n\\times n}|&#x3D;k^n|A|$ ; $|A^{*}_{n\\times n}|&#x3D;|A|^{n-1}$\n$|AB|&#x3D;|A||B|$\n$|A+B|\\neq|A|+|B|$，就是说不能把里面的各个方阵分开求行列式再加和\n[Tip]提出来行列式内系数 $k$ 的时候也要注意，若方阵是 $n$ 阶，提出来的是 $k^n$\n\n\n方阵的转置与逆$$(A^T)^T &amp;&#x3D;&amp; A &amp;;&amp; (A^{-1})^{-1}&amp;&#x3D;&amp;A\\(A+B)^T &amp;&#x3D;&amp; A^T + B^T &amp;;&amp; &amp;&#x2F;\\(kA)^T &amp;&#x3D;&amp; kA^T &amp;;&amp; (kA)^{-1}&amp;&#x3D;&amp;\\frac{1}{k}A^{-1}\\(AB)^T &amp;&#x3D;&amp; B^TA^T &amp;;&amp; (AB)^{-1}&amp;&#x3D;&amp;B^{-1}A^{-1}\\&amp;&amp;&amp;&amp;(A^T)^{-1}&amp;&#x3D;&amp;(A^{-1})^T$$\n\n矩阵的秩\n\n$A\\xrightarrow[]{初等行变换}B_{阶梯型}$，则 $r(A) &#x3D; n_{B非零行数}$\n满秩矩阵 $\\Leftrightarrow$ 非奇异矩阵 $\\Leftrightarrow$ 矩阵可逆 $\\Leftrightarrow$ 对应行列式不为零\n秩也是矩阵中线性无关行（或列）的最大个数\n\n\n矩阵秩的不等式$$  r(AB)&amp;\\leq &amp; \\min{r(A),r(B)}\\  r(A+B)&amp;\\leq &amp; r(A)+r(B)\\  r(A|B)&amp;\\leq &amp; r(A)+r(B)\\  r(A)+r(B)&amp;\\leq &amp; r(AB)+n$$\n\n\n\n对 $AB&#x3D;O$\n\n$$  r(A_{n\\times n})+r(B_{n\\times n})\\leq  n$$\n\n对 $A_{n\\times n}(n\\geq2)$\n\n$$r(A^*)&#x3D;  \\begin{cases}      n&amp;r(A)&#x3D;n\\      1&amp;r(A)&#x3D;n-1\\      0&amp;r(A)&lt;n-1  \\end{cases}$$\n\n若 $C&#x3D;\\begin{pmatrix}A&amp;O\\O&amp;B\\end{pmatrix}$\n\n$$  r(C) &#x3D; r(A)+r(B)$$\n\n若 $C&#x3D;\\begin{pmatrix}A&amp;O\\O&amp;B\\end{pmatrix}$\n\n$$  r(C) &#x3D; r(A)+r(B)$$\n\n若 $C&#x3D;\\begin{pmatrix}A&amp;C\\O&amp;B\\end{pmatrix}$$$r(C) \\geq r(A)+r(B)$$\n\n[1.3.x] 向量组的线性相关\n判别向量组线性相关性-数字型\n\n[Key]两个向量 $\\alpha_1,\\alpha_2$ 相关 $\\Leftrightarrow$ $\\alpha_1$ 与 $\\alpha_2$ 对应成比例 $\\Leftrightarrow$ 方阵 $|\\alpha_1,\\alpha_2|&#x3D;0$\n[Key]多个向量 $\\alpha_1,\\alpha_2,…,\\alpha_m$ 相关（无关） $\\Leftrightarrow$ $\\left{ \\begin{array}{rcl}|\\alpha_1,…,\\alpha_m|&#x3D;0(\\neq0)&amp;方阵\\r(\\alpha_1,…,\\alpha_m)&lt;m(&#x3D;m)&amp;非方阵\\end{array} \\right.$\n\n\n判别向量组线性相关性-抽象型\n\n[Key·1]逆向思维，复杂矩阵抽离成简单分块矩阵相乘：$(\\beta_1,\\ \\beta_2,\\ \\beta_3)&#x3D;(\\alpha_1,\\ \\alpha_2,\\ \\alpha_3)C$\neg. $(\\alpha_1+3\\alpha_2,\\ 2\\alpha_1+4\\alpha_2)&#x3D;(\\alpha_1,\\ \\alpha_2)\\begin{pmatrix}1&amp;3\\2&amp;4\\end{pmatrix}$\neg. $(\\alpha_1-\\alpha_2,\\ 2\\alpha_2-\\alpha_3,\\ \\alpha_1+\\alpha_2+\\alpha_3)&#x3D;(\\alpha_1,\\alpha_2,\\alpha_3)\\begin{pmatrix}1&amp;0&amp;1\\-1&amp;2&amp;1\\0&amp;-1&amp;1\\end{pmatrix}$\n\n\n[Key·2] $\\alpha_1,\\alpha_2,\\alpha_3$ 线性无关，则：$\\left{\\begin{array}{rcl}|C|&#x3D;0\\Rightarrow\\beta_1,\\beta_2,\\beta_3相关\\|C|\\neq0\\Rightarrow\\beta_1,\\beta_2,\\beta_3无关\\end{array} \\right.$\n换言之：$\\left{\\begin{array}{rcl}无关组\\cdot不可逆阵\\Rightarrow相关\\无关组\\cdot可逆阵\\Rightarrow无关\\end{array} \\right.$\n\n\n\n\n求向量组的秩和极大无关组\n\n[Key] $r(\\alpha_1,\\alpha_2,\\alpha_3)&#x3D;$ 矩阵 $(\\alpha_1,\\alpha_2,\\alpha_3)$ 的阶梯型中非零行数\n[Key] $\\alpha_1,\\alpha_2,\\alpha_3$的极大无关组一般取阶梯型“拐弯处”所在列向量\neg. $(\\alpha_1,\\alpha_2,\\alpha_3)\\rightarrow\\begin{pmatrix}1&amp;4&amp;1\\0&amp;-9&amp;5\\0&amp;0&amp;0\\0&amp;0&amp;0\\end{pmatrix}$，则 $\\alpha_1,\\alpha_2$可以构成一个极大无关组\n\n\n\n\n\n[1.4.x] 线性方程组\n齐次方程组 $AX&#x3D;O$ 的求解\n\n$$A_{m\\times n}X&#x3D;O\\Longrightarrow\\left{ \\begin{array}{rcl}r(A_{m\\times n})&#x3D;n&amp;AX&#x3D;0\\ 只有零解&#x2F;唯一解\\r(A_{m\\times n})&lt;n&amp;A X&#x3D;0\\ 有非零解&#x2F;无穷解\\end{array}\\right.$$\n\n[Tip]系数矩阵的列数（$A_{m\\times n}$ 中的 $n$）就是未知数的个数\n\n\n基础解系：当 $AX&#x3D;O$ 有无穷解时，解集的极大无关组为基础解系\n\n[Key]基础解系含解向量个数为 $n-r(A)$\n[Tip] $n-r(A)&#x3D;$ 基础解系含解向量个数 $\\Leftrightarrow$ 未知数个数$-$有效方程个数$&#x3D;$自由变量个数\n\n\n基础解系求法：\n\n把系数矩阵化为行最简形。\neg. $A\\rightarrow\\begin{pmatrix}1&amp;0&amp;2&amp;-1\\0&amp;1&amp;3&amp;4\\0&amp;0&amp;0&amp;0\\end{pmatrix}$\n\n\n“非拐弯处变量”作为自由变量，有 $n-r(A)$ 个。\neg. $\\xi_1&#x3D;\\begin{pmatrix}-2\\-3\\1\\0\\end{pmatrix}$, $\\xi_2&#x3D;\\begin{pmatrix}-1\\-4\\0\\1\\end{pmatrix}$\n\n\n通解 $X&#x3D;k_1\\xi_1+k_2\\xi_2\\ (k_1,k_2为任意常数)$\n\n\n\n\n非齐次方程组 $AX&#x3D;b$ 的求解\n\n$$A_{m\\times n}X&#x3D;b\\Longrightarrow\\begin{cases}r(A)&#x3D;r(A|b)    \\begin{cases}            &lt;n&amp; AX&#x3D;b\\ 有无穷解\\            &#x3D;n&amp; AX&#x3D;b\\ 有唯一解    \\end{cases}\\r(A)\\neq r(A|b)~~~~~~~~~~~~~~AX&#x3D;b\\ 无解\\end{cases}\\nonumber$$\n\n非齐次方程组通解 $&#x3D;$ 齐次方程组通解 $+$ 非齐次方程组特解\n\n齐次方程组通解：用1.的方法\n非齐次方程组特解：一般令1.中自由变量为0，导出 $\\eta$（实际上就对应行最简型的最后一列补0）\n\n\n$AX&#x3D;b$ 通解为 $X&#x3D;k_1\\xi_1+k_2\\xi_2+…+k_n\\xi_n+\\eta$\n\n\n\n带参方程组求解\n\n翻译条件，归纳为无穷解&#x2F;唯一解&#x2F;无解从而得出相应方程关系，再根据1.2.知识求解。\n\n\n\n\n[1.5.x] 矩阵的对角化\n数值型-特征值与特征向量\n\n求 $A$ 特征值方法：由特征方程 $|\\lambda E-A|&#x3D;0$ 解得 $\\lambda$ 即为 $A$ 的特征值（$|\\lambda E-A|$ 称为特征多项式）\n求 $A$ 特征向量（对应特征值为 $\\lambda_0$）：$(\\lambda_0E-A)x&#x3D;0$ 的基础解系\n\n\n抽象型-特征值与特征向量\n\n已知抽象矩阵的特征值，求关于抽象矩阵的新矩阵特征值\n\n关于 $A$ 的性质：\n\n几何重数：$\\lambda_0$ 是 $A$ 的 $k$ 重特征值，称 $\\lambda_0$ 的几何重数是 $k$  代数重数：$\\lambda_0$ 对应 $r$ 个线性无关的特征向量（$r$ 为 $V_{\\lambda_0}$ 的维数），称 $\\lambda_0$ 的代数重数为 $r$\n\n几何重数不大于代数重数（$k\\le r$）\n\n\n若 $A$ 的特征值为 $\\lambda_1,\\lambda_2,…,\\lambda_n$\n\n对应特征向量 $\\alpha_1,\\alpha_2,…,\\alpha_n$ 线性无关\n【$A$ 的行列式等于特征值之积】\n$|A|&#x3D;\\displaystyle\\prod\\limits_{i&#x3D;1}^n\\lambda_i$，\n$|A|&#x3D;0\\Rightarrow A$ 至少有一个特征值为0  $|A|\\neq0 \\Rightarrow A$ 的特征值均非0\n\n\n【$A$ 的迹等于特征值之和】迹：矩阵主对角线元素和\n$\\tr A &#x3D; \\displaystyle\\sum\\limits_{i&#x3D;1}^n\\lambda_i$\n\n\n\n\n若 $\\lambda$ 是 $A$ 特征值，$\\alpha$ 是对应特征值的特征向量，有 $A\\alpha&#x3D;\\lambda\\alpha$\n\n\n\n\n\n\n\n$A$\n$A^2$\n$A^3+5A-6E$\n$A^{-1}$\n$A^*$\n$A^T$\n$B\\sim A~(B&#x3D;P^{-1}AP)$\n\n\n\n特征值\n$\\lambda$\n$\\lambda^2$\n$\\lambda^3+5\\lambda-6$\n$\\displaystyle\\frac{1}{\\lambda}$\n$\\displaystyle\\frac{\nA\n}{\\lambda}$\n\n\n特征向量\n$\\alpha$\n$\\alpha$\n$\\alpha$\n$\\alpha$\n$\\alpha$\n不确定\n$P^{-1}\\alpha$\n\n\n\n\n\n相似矩阵\n\n存在可逆矩阵 $P$ 使得 $P^{-1}AP&#x3D;B$，称 $A$ 相似于 $B$，记为 $A\\sim B$\n性质\n自反性：$A\\sim A$\n对称性：$A \\sim B \\Leftrightarrow B\\sim A$\n传递性：$A \\sim B, B\\sim C \\Leftrightarrow A\\sim C$\n若 $A\\sim B$，则：\n$A,B$ 等价（$C,D$ 等价 $\\Leftrightarrow$ 经过若干次初等行变换，使得 $P_iAQ_j&#x3D;B$ （$P_i,Q_i$可逆））\n$A,B$ 有相同特征值、行列式与迹\n$A,B$ 有相同的秩\n$kA\\sim kB$\n$A^{-1}\\sim B^{-1}$\n$f(A)\\sim f(B)$\ne.g. $3A^2-6A+5E\\sim3B^3-6B+5E$\n\n\n\n\n$A^m\\sim B^m$\n\n\n\n\n矩阵的相似对角化\n\n若存在可逆矩阵 $P$ ，使 $P^{-1}AP&#x3D;\\mit\\Lambda$（ $\\mit\\Lambda$ 为对角矩阵），则称 $A$ 可相似对角化（此时有 $A\\sim\\mit{\\Lambda}$）\n\n判定 $n$ 阶矩阵 $A$ 能否相似对角化\n\n充要条件：$A$ 有 $n$ 个线性无关的特征向量\n如果一个矩阵的特征值都是不同的，那么它一定可以相似对角化\n\n如果一个矩阵每个特征值的代数重数（特征多项式中的重数）等于几何重数（对应该特征值的特征向量的维数）那么它一定可以相似对角化\n\n如果一个矩阵的某个特征值的代数重数大于它的几何重数，那么它一定不能相似对角化\n\n\n\n\n\n把 $A$ 相似对角化的步骤\n\n求 $A$ 特征值 $\\lambda_1,\\lambda_2,…,\\lambda_n$\n\n求对应特征向量 $\\alpha_1,\\alpha_2,…,\\alpha_n$\n\n令 $P&#x3D;(\\alpha_1,\\alpha_2,…,\\alpha_n)$，则$$P^{-1}AP&#x3D;{\\mit \\Lambda}&#x3D;{\\rm diag}(\\lambda_1,\\lambda_2,…,\\lambda_n)&#x3D;\\begin{pmatrix}\\lambda_1 &amp; 0 &amp; \\cdots &amp; 0 \\0 &amp; \\lambda_2 &amp; \\cdots &amp; 0 \\\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\0 &amp; 0 &amp; \\cdots &amp; \\lambda_n\\end{pmatrix}$$\n\n\n\n\n\n实对称矩阵\n\n实：矩阵元素为实数；对称：方阵，以主对角线为轴对称\n\n特征值为实数；对应特征值为实向量\n\n非实对称矩阵就不一定。如 $\\begin{pmatrix}0&amp;1\\-1&amp;0\\end{pmatrix}$ 对应特征方程为 $\\lambda^2+1&#x3D;0$，对应的特征值为虚根。\n\n\n互不相等的特征值对应的特征向量间两两正交\n\n所有特征值的几何重数等于代数重数\n\n\n\n实对称矩阵的相似对角化·利用相似矩阵\n\nn阶实对称矩阵 $A$ 必可对角化，且一定存在正交矩阵 $Q$ ，使得 $Q^{-1}AQ&#x3D;Q^TAQ&#x3D;{\\rm diag}(\\lambda_1,…,\\lambda n)$\n\n正交矩阵 $Q$ 的性质\n$Q^T&#x3D;Q^{-1}$\n\n$Q^TQ&#x3D;QQ^T&#x3D;E$\n\n$|Q|&#x3D;\\pm0$\n\n\n\n\n\n把对称阵 $A$ 用正交阵 $Q$ 相似对角化的步骤\n\n求 $A$ 特征值 $\\lambda_1,\\lambda_2,…,\\lambda_n$\n\n求对应特征向量 $\\alpha_1,\\alpha_2,…,\\alpha_n$\n\n把 $\\alpha_1,\\alpha_2,…,\\alpha_n$ 中不正交的矩阵正交化：\n\n若 $\\alpha_1,\\alpha_2,…$ 不正交，令\n\n  $$  \\beta_1&#x3D;&amp;\\alpha_1\\  \\beta_2&#x3D;&amp;\\alpha_2-\\displaystyle\\frac{(\\alpha_2,\\beta_1)}{(\\beta_1,\\beta_1)}\\beta_1\\  (\\beta_3&#x3D;&amp;\\alpha_3-\\displaystyle\\frac{(\\alpha_3,\\beta_1)}{(\\beta_1,\\beta_1)}\\beta_1-\\frac{(\\alpha_3,\\beta_2)}{(\\beta_2,\\beta_2)}\\beta_2)\\  &amp;…      \\nonumber  $$\n\n单位化所有特征向量，得 $\\xi_1,\\xi_2,…,\\xi_n$  $$  \\xi_i &#x3D; \\displaystyle\\frac{\\alpha_i}{||\\alpha_i||}  \\nonumber  $$\n\n令 $Q&#x3D;(\\xi_1,\\xi_2,…,\\xi_n)$，则  $$  Q^{-1}AQ&#x3D;{\\mit \\Lambda}&#x3D;{\\rm diag}(\\lambda_1,\\lambda_2,…,\\lambda_n)&#x3D;  \\begin{pmatrix}  \\lambda_1 &amp; 0 &amp; \\cdots &amp; 0 \\  0 &amp; \\lambda_2 &amp; \\cdots &amp; 0 \\  \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\  0 &amp; 0 &amp; \\cdots &amp; \\lambda_n  \\end{pmatrix}  \\nonumber  $$\n\n\n\n\n\n\n\n单矩阵关系\n\n对合矩阵 $A^2&#x3D;E$\n幂零矩阵 $A^2&#x3D;0$\n对称矩阵 $A^T&#x3D;A$\n反对称矩阵 $A^T&#x3D;-A$\n正交矩阵 $A^T&#x3D;A^{-1}$\n初等矩阵 通过一次初等行&#x2F;列变换就可以得到 $E$ 的矩阵\n\n多矩阵关系\n\n等价\n\n定义：$PAQ&#x3D;B$\n\n向量组等价：两个向量组能够相互线性表出 $\\Leftrightarrow$ 两向量组维数相同（包含向量数不一定相同）\n\n矩阵等价：两个同型矩阵能够通过初等变换相互转化 $\\Leftrightarrow$ 两同型矩阵秩相等\n\n\n\n相似\n\n定义：$P^{-1}AP&#x3D;B$\n本质：$A$ 和 $B$ 是在不同基中的同一个线性变换\n判定：着眼于特征值与特征向量\n【特征值相等】\n矩阵的迹是否相等\n矩阵的秩是否相等（求解行列式）\n矩阵特征值是否相等\n【特征值对应的特征向量相等】\n$\\lambda E-A$ 和 $\\lambda E-B$ 的秩是否相等（看多重特征根）\n\n\n\n\n合同\n\n定义：$P^TAP&#x3D;B$\n判定：$A,B$ 均为实数域上的n阶对称矩阵，则A与B在实数域上合同等价于A与B有相同的正、负惯性指数（即正、负特征值的个数相等）\n\n\n\n\n[1.6.x] 二次型\n二次型的矩阵表示\n\n二次型矩阵的三要素\n\n$A^T&#x3D;A$\n$A$ 的主对角元素为平方项系数\n$A$ 的非主对角元素为交叉项系数的一半\n\n\ne.g.$$f(x_1,x_2)&#x3D;&amp;2x_1^2-x_2^2+6x_1x_2\\&#x3D;&amp;(x_1,x_2)\\begin{pmatrix}2&amp;3\\3&amp;-1\\end{pmatrix}\\begin{pmatrix}x_1\\x_2\\end{pmatrix}\\&#x3D;&amp;x^TAx\\\nf(x_1,x_2,x_3)&#x3D;&amp;x_1^2+3x_2^2-x_3^2+2x_1x_2+2x_1x_3-3x_2x_3\\&#x3D;&amp;(x_1,x_2,x_3)\\begin{pmatrix}1&amp;1&amp;1\\1&amp;3&amp;-3&#x2F;2\\1&amp;-3&#x2F;2&amp;-1\\end{pmatrix}\\begin{pmatrix}x_1\\x_2\\x_3\\end{pmatrix}\\&#x3D;&amp;x^TAx\\\\nonumber$$\n\n\n\n化二次型为标准型\n\n只有平方项的二次型称为标准形\n\n配方法：\n\n$$a^2+2ab&amp;&#x3D;&amp;a^2+2ab+b^2-b^2&amp;&#x3D;&amp;(a+b)^2-b^2\\a^2+ab&amp;&#x3D;&amp;a^2+2a\\frac{b}{2}+(\\frac{b}{2})^2-(\\frac{b}{2})^2&amp;&#x3D;&amp;(a+\\frac{b}{2})^2-\\frac{b^2}{4}\\a^2+a\\Delta&amp;&#x3D;&amp;a^2+2a\\frac{\\Delta}{2}+(\\frac{\\Delta}{2})^2-(\\frac{\\Delta}{2})^2&amp;&#x3D;&amp;(a+\\frac{\\Delta}{2})^2-\\frac{\\Delta^2}{4}\\nonumber$$\n\n依次配方所有包含 $x_1,x_2,…$ 的项\n\n当所有项都为完全平方项时，换元（以 $f(x_1,x_2,x_3)$ 为例$f&#x3D;&amp;a(p_1x_1+q_1x_2+r_1x_3)^2+b(p_2x_1+q_2x_2+r_2x_3)^2+c(p_3x_1+q_3x_2+r_3x_3)^2\\&amp;\\rightarrow\\left{\\begin{aligned}y_1&amp;&#x3D;p_1x_1+q_1x_2+r_1x_3\\y_2&amp;&#x3D;p_2x_1+q_2x_2+r_2x_3\\y_3&amp;&#x3D;p_3x_1+q_3x_2+r_3x_3\\end{aligned}\\right.\\&amp;\\rightarrow\\left{\\begin{aligned}x_1&amp;&#x3D;s_1x_1+t_1x_2+u_1x_3\\x_2&amp;&#x3D;s_2x_1+t_2x_2+u_2x_3\\x_3&amp;&#x3D;s_3x_1+t_3x_2+u_3x_3\\end{aligned}\\right.$\n\n记 $x&#x3D;(x_1,x_2,x_3)^T,y&#x3D;(y_1,y_2,y_3)^T,P&#x3D;\\begin{pmatrix}s_1 &amp; t_1 &amp; u_1 \\s_2 &amp; t_2 &amp; u_2 \\s_3 &amp; t_3 &amp; u_3\\end{pmatrix}$\n\n在线性代换 $x&#x3D;Py$ 下，得到标准形：$f&#x3D;ay_1^2+by_2^2+cy_3^2$\n\n若 $f(x_1,x_2,x_3)$ 无法直接配方，先令：$$\\left{\\begin{aligned}x_1&amp;&#x3D;y_1+y_2\\x_2&amp;&#x3D;y_1-y_2\\x_3&amp;&#x3D;y_3\\end{aligned}\\right.$$\n\n\n\n\n正交变化法：\n\n写出 $f$ 的矩阵 $A$\n求 $A$ 的特征值 $\\lambda_1,…,\\lambda_n$\n求 $A$ 的特征向量 $\\alpha_1,…,\\alpha_n$\n将特征向量中不正交向量的施密特正交化\n所有向量单位化得到 $\\xi_1,…,\\xi_n$\n得到正交矩阵 $Q&#x3D;(\\xi,…,\\xi_n)$\n记 $x&#x3D;(x_1,x_2,x_3)^T$，$y&#x3D;(y_1,y_2,y_3)^T$\n在线性代换 $x&#x3D;Qy$ 下，得到标准形 $f&#x3D;\\lambda_1y_1^2+…+\\lambda_ny_n^2$\n\n\n\n\n正定二次型和正定矩阵\n\n概念：对任意 $\\boldsymbol x\\neq \\bold0$，对实二次型 $f$ 有 $f&#x3D;\\boldsymbol x^TA\\boldsymbol x&gt;0$，称 $f$ 为正定二次型，$A$ 为正定矩阵\n\n$A$ 为实对称矩阵 $\\Leftrightarrow$ $A$ 正定\n\n二次型 $f$ 正定 &#x2F; 矩阵 $A$ 正定的判定方法（主要）\n\n$A$ 的特征值全大于零（即 $f$ 的正惯性指数&#x3D;&#x3D;未知数个数）\n\n正惯性指数：标准形中正平方项的个数\n\n\n$A$ 的各阶顺序主子式皆大于零\n\n\n\n\n\n\n[1.7.x] 线性空间与线性变换\n线性空间\n\n定义：$V$ 是集合， $V$ 满足加法、数乘封闭\n\n基（类比向量组的极大无关组）\n\n$V$ 中能线性表示 $V$ 中任意向量的向量组 $a_1,…,a_m$ 是一组基\n\n\n维数（类比向量组的秩）\n\n$V$ 中一组基中包含向量的数目 $m$ 是 $V$ 的维数，记作 ${\\rm div}(V)&#x3D;m$\n\n\n$n$ 维实向量空间\n\n所有 $n$ 维实向量构成的集合，记作 $R^n$\n$n$ 维基本向量组 $\\xi_1,…,\\xi_n$ 是 $R^n$ 一组基\neg. $R^3$ 一组基为 $\\begin{pmatrix}1 \\0 \\0\\end{pmatrix},  \\begin{pmatrix}0 \\1 \\0\\end{pmatrix},  \\begin{pmatrix}0 \\0 \\1\\end{pmatrix}$\n\n\n[Tip]任意 $n$ 个线性无关的 $n$ 维实向量一定能构成 $R^n$ 一组基\n[Tip]方阵 $A_{n\\times n}$ 满秩（$|A|\\neq0$），则 $A$ 行&#x2F;列向量一定能构成 $R^n$ 一组基\n\n\n向量在基下的坐标\n\n设向量空间 $V$ 有一组基 ${e_1,\\dots,e_n}$，对于 $V$ 中的任意向量 $\\beta$，它可以表示为基向量的线性组合：$\\beta&#x3D;a_1e_1+\\dots+a_ne_n&#x3D;(e_1,\\dots,e_n)(a_1,a_2,\\dots,a_n)^T$\n  称 $(a_1,a_2,\\dots,a_n)^T$ 为向量 $\\beta$ 在基 ${e_1,\\dots,e_n}$ 下的坐标。\n\n[Tip] $R^n$ 有无数组基\n\n[Tip] 同一向量在一组基下坐标唯一，在不同基下坐标不同\n\n\n\n过渡矩阵\n\n同一向量空间下不同基变换使用的矩阵\n设 $V$ 下有两组基 ${\\alpha_1,\\dots,\\alpha_n},{\\ \\beta_1,\\dots,\\beta_n}$，其向量组分别记为$A,B$  $A&#x3D;BC_{m\\times m}$，则 $C$ 是 $B$ 到 $A$ 的过渡矩阵\n若 $\\beta$ 在两组基下坐标分别为 $x&#x3D;(x_1,\\dots,x_n)^T,x’&#x3D;(x_1’,\\dots,x_n’)^T$  称 $x&#x3D;Cx’$ 或 $x’&#x3D;C^{-1}x$ 为坐标变换公式\n\n\n向量的内积、长度和夹角\n\n设 $\\alpha &#x3D; (\\alpha_1,\\dots,\\alpha_m)^T,\\beta&#x3D;(\\beta_1,\\dots,\\beta_m)^T$\n内积：$(\\alpha,\\beta)&#x3D;\\sum\\alpha_i\\beta_i$（点乘，相当于 $\\alpha·\\beta$）\n$(\\alpha,\\beta)&#x3D;0$，称 $\\alpha,\\beta$ 正交\n\n\n长度：$\\lVert\\alpha\\rVert&#x3D;\\sqrt{(\\alpha,\\alpha)}$\n$\\lVert\\alpha\\rVert&#x3D;0\\Leftrightarrow\\alpha&#x3D;\\mathbf{0}$\n单位向量：长度为1\n单位化：$\\alpha\\rightarrow\\displaystyle\\frac{\\alpha}{\\sqrt{(\\alpha,\\alpha)}}$\n\n\n夹角：$\\langle\\alpha,\\beta\\rangle&#x3D;{\\rm arccos}\\displaystyle\\frac{(\\alpha,\\beta)}{\\lVert\\alpha\\rVert\\lVert\\beta\\rVert}$\n\n\n正交向量组与正交基\n\n正交向量组：一组非零且两两正交的向量组\n正交基：基为正交向量组\n标准正交基&#x2F;规范正交基：基为正交向量组且每个基为单位向量\n\n\n向量组的正交化和单位化\n\n\n\n\n"},{"title":"Hello World","url":"/2022/10/25/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["Hexo"],"tags":["Hexo"]}]