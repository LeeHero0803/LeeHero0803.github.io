[{"title":"故事的开始","url":"/2023/07/06/%E6%95%85%E4%BA%8B%E7%9A%84%E5%BC%80%E5%A7%8B/","content":"写在前面\n从一个想法开始，花一个下午时间，在这个赛博世界，我也有了一隅冠以己名的桃花源。\n\n在故事的前言，我在这里记录维护这里的一些必要的操作，以防这些记忆迷失于未名的角落\n换言之，这是一份写给自己的使用说明\n关于驱动框架：HexoHexo 官网\n在 Hexo 对应根目录右键打开 Git Bash Here，使用 Git Bash 完成命令。\n初始化$ hexo init \n\n需要在空文件夹执行此命令，将克隆 Hexo 的启动配置包我们这里跳过这一步，直接使用 Keep 主题自带启动包，这将省去配置 Keep 主题的过程\n本地生成与上线$ hexo n &quot;title&quot; # (new) 新建以 title 为标题的博客$ hexo clean     # 清除缓存和已生成的静态文件 public$ hexo g         # (generate) 生成网站静态文件$ hexo d         # (deploy) 推送本地 blog 到 github 仓库$ hexo s         # (server) 开启本地预览服务\n\n本地预览的地址一般是 http://localhost:4000/\n关于主题配置：Keep在 Keep 的中文开发文档中可以找到这个主题的一切指南。\n值得留意的是：\n\nHexo 配置文件目录：\\_config.yml\n\n主题配置文件目录：\\source\\_data\\keep.yml\n\n\n一些问题的解决方案图片资源嵌入&#123;% asset_img [file] %&#125;\n\n[file] 为 _post 文件夹下与博客同名目录\n官方文档介绍：资源文件夹 | Hexo\n参考资料Hexo 最常用的几个命令\n2021最全hexo搭建博客+matery美化+使用\nKeep 主题使用指南 | XPoet’s Blog\n","categories":["知识碎片"],"tags":["Hexo"]},{"title":"MIT-Missing-Semester 01 The Shell","url":"/2023/07/07/MIT-Missing-Semester-01-The-Shell/","content":"MIT-Missing SemesterTopic 01: The Shell什么是 ShellShell 是操作系统的最外层，是一个用户跟操作系统之间交互的命令解释器. 它允许“执行程序，输入并获取某种半结构化的输出”. 当可视化界面无法解决问题，调用这些基于命令行或者文本的工具是必要的.\n最广泛使用的一种Shell——Bash*(Bourne Again SHell)*\n最主要的文本接口：\nmissing:~$\n\n\n主机名：missing\n当前工作目录：~(home)\n\n一些例子：\nmissing:~$ dateFri 10 Jan 2020 11:49:31 AM EST\n\nmissing:~$ echo hellohellomissing:~$ echo hello\\ worldhello world\n\n\nshell 基于空格分隔命令并解析，然后执行第一个单词代表的程序。如果传递的参数包含空格，需要通过\\进行转义。eg. My\\ Photos\n\nmissing:~$ echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binmissing:~$ which echo/bin/echomissing:~$ /bin/echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n\nshell 实际上是个编程环境，具备变量、条件、循环和函数。\n当要求 shell 执行某个指令时，会在环境变量 $PATH 下搜索 : 分隔的一系列目录，搜索以你的指令名命名的程序，当找到便执行（若可执行）\n确定程序名具体代表哪个程序，可以使用 which 程序\n也可以直接指定路径（绝对路径）来执行程序，绕过 $PATH\n\n在 Shell 中导航绝对路径：能完全确定文件位置的路径，从根目录&#x2F;文件系统的顶部开始。在 Linux 文件系统中以 / 开头，在 Windows下每个盘有根目录，eg C:\\\n相对路径：相对于当前工作目录的路径。\nmissing:~$ pwd/home/missingmissing:~$ cd /homemissing:/home$ pwd/homemissing:/home$ cd ..missing:/$ pwd/missing:/$ cd ./homemissing:/home$ pwd/homemissing:/home$ cd missingmissing:~$ pwd/home/missingmissing:~$ ../../bin/echo hellohello\n\n\n获取当前工作目录：pwd\n\n切换目录：cd\n\n相对路径表示中：. 当前目录；.. 父目录\n\n~ 扩展到主目录，可以用来写相对路径 eg. cd ~/dev/pdos/classes/missing-semsester\n\n\nmissing:~$ lsmissing:~$ cd ..missing:/home$ lsmissingmissing:/home$ cd ..missing:/$ lsbinbootdevetchome...\n\n\n当前目录文件列表：ls，后面可以接路径\neg. ls .. 与分别执行 cd .. 和 ls 显示效果相同。\n\n\n\n标记和选项&#x2F;带有值的标记以 - 开头。\n可以通过 -h 或 -help 打印帮助信息；ls -l 可以详细列出目录下文件&#x2F;文件夹的信息，如：\nmissing:~$ ls -l /homedrwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing\n\n\nd：missing 是一个目录\n\n后续每三个字符为一组（wxr），分别代表文件&#x2F;目录于所有者-missing、用户-user 以及其他人在修改-w、执行-x、读取-r 上具有的权限；- 表示不具备对应权限\n\n对于目录而言，x 代表是否被允许进入这个目录\n\n\n一些有用的命令\n\n重命名&#x2F;移动文件：mv\n\n拷贝文件：cp\n\n删除文件：rm\n\n删除给定路径下所有内容，使用递归标志 -r\n\n\n新建文件夹：mkdir\n\n删除空目录：rmdir\n\n查询命令使用手册：man；q 退出\n\n\n在程序之间创建连接程序两个主要的流：输入流（读取）、输出流（打印）\n一般来说，输入输出流都是终端，也就是键盘为输入、显示器为输出。但输入输出流可以重定向\nmissing:~$ echo hello &gt; hello.txtmissing:~$ cat hello.txthellomissing:~$ cat &lt; hello.txthellomissing:~$ cat &lt; hello.txt &gt; hello2.txtmissing:~$ cat hello2.txthellomissing:~$ cat &lt; hello.txt &gt;&gt; hello2.txtmissing:~$ cat hello2.txthello hello\n\n\n&lt; file 和 &gt; file 可以把程序输入输出分别重定向到指定文件\n\n打印文件内容：cat\n\ncat &lt; hello.txt &gt; hello2.txt - 用 hello.txt 作为命令输入，将输出结果写入 hello2.txt。由此实现了 cp 的功能\n\n向一个文件追加内容：&gt;&gt;\n\n\nmissing:~$ ls -l / | tail -n1drwxr-xr-x 1 root  root  4096 Jun 20  2019 varmissing:~$ curl --head --silent google.com | grep --ignore-case content-length | cut --delimiter=&#x27; &#x27; -f2219\n\n\n管道操作符 |：让 | 左边的输出成为 | 右边的输出\n\n更强大的权限根用户具有几乎一切权限，如果在这样的身份下登录系统，出现错误操作可能造成的破坏性是致命的。取而代之，我们会在需要的时候使用 sudo 命令，临时使用根用户的身份\n往 sysfs 文件写入内容仅允许在根用户身份下进行。它挂载在 /sys 下\n\n将输入内容写入文件并输出到标准输出：tee\n\n$ sudo find -L /sys/class/backlight -maxdepth 2 -name &#x27;*brightness*&#x27;/sys/class/backlight/thinkpad_screen/brightness$ cd /sys/class/backlight/thinkpad_screen$ sudo echo 3 &gt; brightnessAn error occurred while redirecting file &#x27;brightness&#x27;open: Permission denied\n\n\n关于 shell，有件事我们必须要知道。|、&gt;、和 &lt; 是通过 shell 执行的，而不是被各个程序单独执行。 echo 等程序并不知道 | 的存在，它们只知道从自己的输入输出流中进行读写。 对于上面这种情况， shell (权限为您的当前用户) 在设置 sudo echo 前尝试打开 brightness 文件并写入，但是系统拒绝了 shell 的操作因为此时 shell 不是根用户。\n\n$ echo 3 | sudo tee brightness\n\n\n因为打开 /sys 文件的是 tee 这个程序，并且该程序以 root 权限在运行，因此操作可以进行\n\n","categories":["课程笔记"],"tags":["Missing Semester"]}]